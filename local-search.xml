<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JVM-2</title>
    <link href="/2024/09/21/JVM/JVM-2/"/>
    <url>/2024/09/21/JVM/JVM-2/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM-2"><a href="#JVM-2" class="headerlink" title="JVM-2"></a>JVM-2</h1><h2 id="jvm的组成"><a href="#jvm的组成" class="headerlink" title="jvm的组成"></a>jvm的组成</h2><p>1）类加载器：ClassLoader</p><p>2）运行时数据区域（JVM管理的内存）</p><p>3）执行引擎（及时编译器，解释器，垃圾回收器等）</p><p>4）本地接口（C++编写的底层调用接口）</p><h3 id="类的生命周期-☆"><a href="#类的生命周期-☆" class="headerlink" title="类的生命周期-☆"></a>类的生命周期-☆</h3><p>生命周期描述了一个类从被加载到使用，卸载的过程</p><p>类的生命周期-应用场景</p><ol><li>类加载器的作用</li><li>类的加密和解密</li><li>多态的原理</li><li>运行时常量池</li></ol><p>学习目录</p><ol><li><p>生命周期的概述</p></li><li><p>加载阶段</p></li><li><p>链接阶段</p></li><li><p>初始化阶段</p></li></ol><p>1）概述</p><p>五个阶段：加载-》连接-》初始化-》使用-》卸载（垃圾回收）</p><p>有些教材会出现七个阶段：这是因为 2连接 做的事情比较多，会被拆分为 验证，准备，解析 三个</p><p>重点阶段：初始化阶段</p><p>2）加载阶段</p><p>加载（Loading）阶段第一步是类加载器，根据类的全限定名通过不同的渠道以二进制流的方式回去字节码信息。</p><p>-程序员可以使用java代码扩展的不同的渠道：</p><p>-本地字节码文件，动态代理生成，通过网络传输的类等。</p><ol start="2"><li><p>类加载器在加载完类之后，java虚拟机会将字节码中的信息保存到方法区中。</p></li><li><p>生成一个InstanceKlass对象，保存类的所有信息，里面还包含时间特定功能比如多态的信息。</p><ol><li><img src="/2024/09/21/JVM/JVM-2/image-20240921110828445.png" alt="image-20240921110828445"></li></ol></li><li><p>同时，Java虚拟机还会在 堆 中生成一份与方法区中数据类似的java.lang.Class对象（作用是在Java代码中区获取类的信息以及存储静态字段的数据（JDK8及以后））</p><p><img src="/2024/09/21/JVM/JVM-2/image-20240921111241415.png" alt="image-20240921111241415"></p><p><img src="/2024/09/21/JVM/JVM-2/image-20240921111115631.png" alt="image-20240921111115631"></p></li></ol><p>Q：为什么需要再 堆区 复制一份 方法区 的字节码文件呢？这样不浪费内存吗？</p><p>A：方法区的instanceKlass是使用C编写的，开发者无法使用Java区访问，而堆区的Java.lang.Class是java编写的，开发者可以访问。并且，方法区里面的东西不是全部都会使用，把会用到的放在堆区使用就行。这样Java虚拟机就能更好的控制开发者访问数据的权限。</p><p><img src="/2024/09/21/JVM/JVM-2/image-20240921111651159.png" alt="image-20240921111651159"></p><p>类的加载阶段 - 查看内存中的对象</p><ul><li><p>推荐使用JDK自带的hsdb工具查看java虚拟机中的内存信息。工具位于JDK安装目录下lib文件夹中的sa-jdi.jar中。</p></li><li><pre><code class="sh">java -cp sa-jdi.jar sun.jvm.hotspot.HSDB// 为什么不使用java -jar呢// 因为这个jar包里面有很多启动类，需要指定启动那一个启动类。<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><br><br><span class="hljs-number">3</span>）连接阶段<br><br><span class="hljs-number">1.</span> 验证：校验字节码是否满足《JAVA虚拟机规范》<br><br>   Linking阶段，程序员不需要参与<br><br>    验证的步骤是非常复杂的，主要包含以下四个步骤：<br><br>   <span class="hljs-number">1</span>：文件格式校验<br><br>   字节码文件是否以CAFEBABE开头，主次版本号是否满足当前Java虚拟机<br><br>   <span class="hljs-number">2</span>：元信息校验：例如类，必须有父类<br><br>   <span class="hljs-number">3</span>：校验字节码指令是否准确<br><br>   <span class="hljs-number">4</span>：校验符号引用，例如是否访问其他类中的<span class="hljs-keyword">private</span>的方法。<br><br>   <br><br><span class="hljs-number">2.</span> 准备：给静态变量赋初始值<br><br>   ![image<span class="hljs-number">-20240921122941591</span>](JVM<span class="hljs-number">-2</span>/image<span class="hljs-number">-20240921122941591.</span>png)<br><br>   ![image<span class="hljs-number">-20240921122955900</span>](JVM<span class="hljs-number">-2</span>/image<span class="hljs-number">-20240921122955900.</span>png)<br><br>   如果是<span class="hljs-keyword">final</span>修饰的，直接赋值（因为是不会发生变化的，直接赋值）<br><br>   ![image<span class="hljs-number">-20240921123101385</span>](JVM<span class="hljs-number">-2</span>/image<span class="hljs-number">-20240921123101385.</span>png)<br><br><span class="hljs-number">3.</span> 解析：将常量池中的符号引用缓存指向内存的直接引用<br><br>   ![image<span class="hljs-number">-20240921123423013</span>](JVM<span class="hljs-number">-2</span>/image<span class="hljs-number">-20240921123423013.</span>png)<br><br><br><br><span class="hljs-number">4</span>）初始化阶段（与程序员有关）<br><br>前面说的，如果变量不是<span class="hljs-keyword">final</span>修饰的，都是赋初始值，不是指定的常量值，而在初始化阶段，会执行静态代码块的代码，并为静态变量赋值。<br><br>初始化阶段会执行字节码文件中 clinit 部分的字节码指令<br><br>![image<span class="hljs-number">-20240921130459507</span>](JVM<span class="hljs-number">-2</span>/image<span class="hljs-number">-20240921130459507.</span>png)<br><br>这里是先定义value，赋值为<span class="hljs-number">0</span>，执行<span class="hljs-type">static</span>赋值为<span class="hljs-number">2</span>，在执行赋值为<span class="hljs-number">1</span>，最后结果就为<span class="hljs-number">1</span><br><br><br><br><br><br>以下几种方式会导致类的初始化：<br><br><span class="hljs-number">1.</span> 访问一个类的静态变量或静态方法，注意变量是<span class="hljs-keyword">final</span>修饰的并且等号右边是常量不会触发初始化。<br><br><span class="hljs-number">2.</span> 调用Class.forName(<span class="hljs-type">String</span> className)。 <br><br>   forName方法有一个需要注意的，他有一个重载，如果只传入className，他会调用另一个方法forName0（），会传入一个<span class="hljs-type">boolean</span> initalize参数表示需要初始化，也可以在调用forName时，指定需不需要初始化forName(className，initialize，classLoader)<br><br><span class="hljs-number">3.</span> <span class="hljs-keyword">new</span>一个类的对象时<br><span class="hljs-number">4.</span> 执行Main方法的当前类<br><br><br><br>```java<br><span class="hljs-comment">// 例题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Test1 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-built_in">main</span>(<span class="hljs-type">String</span>[] args) &#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">Test1</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">Test1</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test1</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">static</span> &#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;D&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 静态代码块在类加载的时候只执行一次。程序一开始，就会先打印出 &quot;D&quot;。</span><br><span class="hljs-comment">     * 程序的入口Main，就会先打印出 &quot;A&quot;。</span><br><span class="hljs-comment">     * 创建 Test1 对象 (new Test1();):</span><br><span class="hljs-comment">     * 初始化实例代码块 (&#123;&#125;): 实例代码块在每个对象创建时都会执行，所以会打印出 &quot;C&quot;。</span><br><span class="hljs-comment">     * 构造方法 (public Test1())： 构造方法用于初始化对象，在这里会打印出 &quot;B&quot;。</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * DACBCB</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul><p>以下几种方式不会导致类的初始化：</p><ol><li><p>无静态代码块且无金泰变量赋值语句。</p></li><li><p>有静态变量的声明，但没有赋值语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a;<br></code></pre></td></tr></table></figure></li><li><p>静态变量的定义使用final关键字，这类变量会在准备阶段直接进行初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure></li></ol><ul><li>直接访问父类的静态变量，不会触发子类的初始化</li><li>子类的初始化clinit调用之前，会先调用父类的clinit初始化方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">B02</span>();<br>        System.out.println(B02.a);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A02</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        a = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A02</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        a = <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 解释：</span><br><span class="hljs-comment"> * 类加载顺序:</span><br><span class="hljs-comment"> * 由于 B02 继承了 A02，并且 main 方法中创建了 B02 对象，所以 A02 会先加载。</span><br><span class="hljs-comment"> * 在加载 A02 时，会执行其静态代码块，将 a 初始化为 1。</span><br><span class="hljs-comment"> * 接着，B02 会加载，执行其静态代码块，将 a 重新赋值为 2。</span><br><span class="hljs-comment"> * 静态变量的特性:</span><br><span class="hljs-comment"> * 静态变量属于类，而不是对象。</span><br><span class="hljs-comment"> * 因此，a 在 A02 和 B02 中都是同一个变量。</span><br><span class="hljs-comment"> * 程序执行流程:</span><br><span class="hljs-comment"> * new B02();： 创建 B02 对象，触发 B02 的加载，并执行其静态代码块，将 a 赋值为 2。</span><br><span class="hljs-comment"> * System.out.println(B02.a);： 打印 B02 类中的静态变量 a 的值，此时 a 的值为 2。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>生命周期总结：</p><p><img src="/2024/09/21/JVM/JVM-2/image-20240921134546066.png" alt="image-20240921134546066"></p><p><img src="/2024/09/21/JVM/JVM-2/image-20240921134555934.png" alt="image-20240921134555934"></p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM-1</title>
    <link href="/2024/09/19/JVM/JVM-1/"/>
    <url>/2024/09/19/JVM/JVM-1/</url>
    
    <content type="html"><![CDATA[<h2 id="Java-JVM"><a href="#Java-JVM" class="headerlink" title="Java JVM"></a>Java JVM</h2><p>课程链接：<a href="https://www.bilibili.com/video/BV1r94y1b7eS/?spm_id_from=333.337.search-card.all.click&vd_source=e331db5667bdaae8e7e5c9ff63da5927">https://www.bilibili.com/video/BV1r94y1b7eS/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e331db5667bdaae8e7e5c9ff63da5927</a></p><h3 id="第一课：实战JVM-基础篇"><a href="#第一课：实战JVM-基础篇" class="headerlink" title="第一课：实战JVM-基础篇"></a>第一课：实战JVM-基础篇</h3><p>初始jvm</p><p>字节码文件详解</p><p>jvm的内存区域</p><p>jvm的垃圾回收</p><h4 id="初始jvm"><a href="#初始jvm" class="headerlink" title="初始jvm"></a>初始jvm</h4><p>java Virtual machine，java虚拟机</p><p>加载字节码.class文件，将字节码转化为机器码，机器码就可以交给计算机运行了。</p><ol><li>解释运行</li><li>内存管理<ol><li>自动为对象方法分配内存</li><li>垃圾自动回收</li></ol></li><li>即时编译</li></ol><p>java不做优化，性能是不如C和C++的</p><p>C和C++可以直接转化为机器码文件直接运行，少去了解释的步骤。</p><p>由于jvm需要实时的解释虚拟机指令，不做任何优化时，性能是不如C和C++的。</p><h5 id="jvm的功能-及时编译：Just-In-Time（JIT）"><a href="#jvm的功能-及时编译：Just-In-Time（JIT）" class="headerlink" title="jvm的功能-及时编译：Just-In-Time（JIT）"></a>jvm的功能-及时编译：Just-In-Time（JIT）</h5><p>jvm会将热点代码字节码指令解释并优化成汇编和机器码语言，关键在于他会保存在内存中，当下次还需要运行这段代码时，就去内存中加载，就省去了一次解释的步骤</p><h5 id="常见的jvm-Java虚拟机规范"><a href="#常见的jvm-Java虚拟机规范" class="headerlink" title="常见的jvm-Java虚拟机规范"></a>常见的jvm-Java虚拟机规范</h5><p>《java虚拟机规范》有Oracle指定，内容主要包含了java虚拟机在设计和实现时需要遵循的规范，只要包含class字节码文件的定义，类和接口的加载和初始化，指令集等内容。</p><p>《java虚拟机规范》是对虚拟机设计的要求，不是对java设计的要求，也就是说虚拟机可以运行其他的语言，比如Groovy，Scala生成的.class字节码文件。</p><p>常见的jvm</p><hr><p><img src="/2024/09/19/JVM/JVM-1/image-20240919091035127.png" alt="image-20240919091035127"></p><hr><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img src="/2024/09/19/JVM/JVM-1/image-20240919091648558.png" alt="image-20240919091648558"></p><h4 id="字节码文件"><a href="#字节码文件" class="headerlink" title="字节码文件"></a>字节码文件</h4><h5 id="JVM的组成"><a href="#JVM的组成" class="headerlink" title="JVM的组成"></a>JVM的组成</h5><p>1类加载器（ClassLoader），</p><p>2运行时数据区域（JVM管理的内存），</p><p>3执行引擎（即时编译，解释器，垃圾回收等），</p><p>4本地接口（调用底层用C++写的方法）</p><h5 id="字节码文件的组成"><a href="#字节码文件的组成" class="headerlink" title="字节码文件的组成"></a>字节码文件的组成</h5><p>1）打开字节码文件：</p><p>推荐使用 Jclasslib 查看，链接：<a href="https://github.com/ingokegel/jclasslib/releases/tag/6.0.5">https://github.com/ingokegel/jclasslib/releases/tag/6.0.5</a></p><p>2）字节码文件的组成</p><p>基础信息，接口：魔数，字节码文件的java版本号，访问标识符（public final等），父类和接口</p><p>常量池：保存了字符串常量，类或接口名，字段名，主要在字节码指令中使用</p><p>字段：当前类或接口声明的字段信息</p><p>方法：当前类或接口声明的方法信息，字节码指令</p><p>属性：类的属性，比如源码的文件名，内部类的列表等</p><p>详解；</p><p>基础信息：一般消息：</p><p>Magic魔数：ca fe ba be，文件是没办法通过文件扩展名来确认文件的，软件识别类型是通过文件头几个字节识别的</p><p><img src="/2024/09/19/JVM/JVM-1/image-20240919095933449.png" alt="image-20240919095933449"></p><p>主副版本号</p><p>主版本号，jdk1.0-1.1使用了45-45.3，jdk1.2是46，在JDK1.2以后的大版本号的计算方式就是：主版本号-44，比如主版本号为52就是jdk8</p><p>副版本号:当主版本号相同是做标识用的。一般值关注主版本号</p><p>作用：判断当前的字节码文件和运行时的jdk是否兼容。</p><p><img src="/2024/09/19/JVM/JVM-1/image-20240919100836874.png" alt="image-20240919100836874"></p><p>常量池</p><p>为了避免重复的内容被重复定义，节约空间</p><p>方法</p><p>字节码中的方法区域是存放 字节码指令 的核心位置，字节码指令的内容存放在方法的Code属性中。</p><p>操作数栈（临时存放）：先进后出</p><p>2）局部连量表：是一个数组实现的</p><p>常见字节码指令的作用：</p><p>iconst_0：表示把0这个常量放入操作数栈中</p><p>istore_1：表示从操作数栈中取出放入局部变量表1号的位置（剪切）</p><p>iload_1：表示从局部变量表的1号位取到操作数栈（复制）</p><p>iadd：（+操作）表示把操作数栈中最上面的两个数相加（删除原来的两个数），结果放入操作数栈最上面。</p><p>iinc 1 by 1：（++操作）表示在局部变量表1号位置增加1</p><p>例题1：int i &#x3D; 0；i &#x3D; i++，问最终的i的值是多少？</p><p>解答：</p><p><img src="/2024/09/19/JVM/JVM-1/image-20240919134005049.png" alt="image-20240919134005049"></p><p>中间无论加了多少次都会被覆盖！</p><p>那，++i呢</p><p><img src="/2024/09/19/JVM/JVM-1/image-20240919134108199.png" alt="image-20240919134108199"></p><p>++i和i++的 iinc和iload的顺序是相反的</p><p><img src="/2024/09/19/JVM/JVM-1/image-20240919134150677.png" alt="image-20240919134150677"></p><p>课后题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br>i++;<br>j = j + <span class="hljs-number">1</span>;<br>k += <span class="hljs-number">1</span>;<br><br>问：这三个”加一“，的操作性能的高低<br>  <br>答：<br>  根据分析字节码文件：<br> <span class="hljs-number">0</span> iconst_0<br> <span class="hljs-number">1</span> istore_1<br> <span class="hljs-number">2</span> iconst_0<br> <span class="hljs-number">3</span> istore_2<br> <span class="hljs-number">4</span> iconst_0<br> <span class="hljs-number">5</span> istore_3<br> <span class="hljs-comment">// 0-5是数据准备</span><br>  <br> <span class="hljs-number">6</span> iinc <span class="hljs-number">1</span> by <span class="hljs-number">1</span><br> <span class="hljs-comment">// 6是i++</span><br>  <br> <span class="hljs-number">9</span> iload_2<br><span class="hljs-number">10</span> iconst_1<br><span class="hljs-number">11</span> iadd<br><span class="hljs-number">12</span> istore_2<br><span class="hljs-comment">// 9-12是 j = j + 1</span><br>  <br><span class="hljs-number">13</span> iinc <span class="hljs-number">3</span> by <span class="hljs-number">1</span><br><span class="hljs-comment">// 13 是 k += 1</span><br><span class="hljs-number">16</span> <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>由此可见，1,3性能一样，2的性能最不好</p><p>但这种字节码层面的差异在实际运行中的性能影响通常是可以忽略不计的。现代的 JVM 会对这些常见操作进行优化，在大多数情况下，我们不需要过于关注这种细微的差异，而应更注重代码的可读性和可维护性。</p><h5 id="玩转字节码常用工具：javap-v命令"><a href="#玩转字节码常用工具：javap-v命令" class="headerlink" title="玩转字节码常用工具：javap -v命令"></a>玩转字节码常用工具：javap -v命令</h5><p>javap是JDK自带的反编译工具，可以在控制台查看到字节码文件的内容，适合在服务器上查看字节码文件内容。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">javap -v simpleCode.class<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">javap // 查看所有，帮助<br>javap -version<br><br>// 如果是jar包，需要解压出来<br>jar -xvf xxx.jar<br>// 如果是springboot项目，字节码文件就在BOOT-INF文件夹下面。<br><br>// 查看<br>javap -v xxx.class<br>// 把输出的结果保存到xxx.txt文件中<br>javap -v xxx.class &gt; /opt/jvm/xxx.txt<br></code></pre></td></tr></table></figure><h5 id="玩转字节码常用工具：jclasslib-ide插件"><a href="#玩转字节码常用工具：jclasslib-ide插件" class="headerlink" title="玩转字节码常用工具：jclasslib ide插件"></a>玩转字节码常用工具：jclasslib ide插件</h5><p>暂时没发现在哪里打开，看插件说明</p><p>When an editor with a Java class file is focused, invoke “View-&gt;Show Bytecode With jclasslib” from the menu</p><h5 id="玩转字节码常用工具：阿里的arthas"><a href="#玩转字节码常用工具：阿里的arthas" class="headerlink" title="玩转字节码常用工具：阿里的arthas"></a>玩转字节码常用工具：阿里的arthas</h5><p>插件连接： <a href="https://arthas.aliyun.com/doc">https://arthas.aliyun.com/doc</a></p><p>arthas 是一款线上监控诊断产品，通过全局视角实时查看应用load，内存，gc，线程的状态等信息，并能在不修改应用代码的情况下，对业务问题进行诊断，大大提升线上问题排查效率。</p><p><img src="/2024/09/19/JVM/JVM-1/image-20240919171350679.png" alt="image-20240919171350679"></p><p>可以直接下载jar包：arthas-boot.jar 使用</p><p>线上环境使用 arthas 的 dump 命令导出字节码文件再查看本地文件，还可以使用 jad 命令反编译出源代码</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop集群搭建</title>
    <link href="/2024/09/02/Hadoop/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/09/02/Hadoop/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Hadoop集群搭建"><a href="#Hadoop集群搭建" class="headerlink" title="Hadoop集群搭建"></a>Hadoop集群搭建</h1><p>谈到大数据，就会想到集群和分布式，他们有什么相同点和不同点呢？</p><p>分布式和集群的概念：</p><p>分布式：多台机器上部署不同的组件</p><p>集群：多台机器上部署相同的组件</p><p>Apache Hadoop 它主要有以下几个优点：</p><ul><li><strong>高可靠性</strong>。Hadoop 按位存储和处理数据的能力值得人们信赖。</li><li><strong>高扩展性</strong>。Hadoop 是在可用的计算机集簇间分配数据并完成计算任务的，这些集簇可以方便地扩展到数以千计的节点中。</li><li><strong>高效性</strong>。Hadoop 能够在节点之间动态地移动数据，并保证各个节点的动态平衡，因此处理速度非常快。</li><li><strong>高容错性</strong>。Hadoop 能够自动保存数据的多个副本，并且能够自动将失败的任务重新分配。</li><li><strong>低成本</strong>。Hadoop 是开源的，项目的软件成本因此会大大降低。</li></ul><p>大数据：分布式存储，分布式计算</p><p>hadoop组件：HDFS（解决数据存储），YARN（解决资源管理调度），MapReduce（进行程序计算）</p><h2 id="Hadoop集群的概述"><a href="#Hadoop集群的概述" class="headerlink" title="Hadoop集群的概述"></a>Hadoop集群的概述</h2><ul><li><p>Hadoop集群包含两个集群：HDFS集群，YARN集群</p></li><li><p>两个集群逻辑上分离，通常物理上在一起</p></li><li><p>两个集群都是标准的主从架构集群</p></li></ul><p>Hadoop集群必须是HDFS集群和YARN集群</p><h4 id="HDFS集群"><a href="#HDFS集群" class="headerlink" title="HDFS集群"></a>HDFS集群</h4><p>主角色：NameNode</p><p>从角色：DataNode</p><p>主角色辅助角色：SecondaryNameNode</p><h4 id="YARN集群"><a href="#YARN集群" class="headerlink" title="YARN集群"></a>YARN集群</h4><p>主角色：ResourceManager</p><p>从角色：NodeManager </p><h4 id="理解逻辑上分离，物理上在一起"><a href="#理解逻辑上分离，物理上在一起" class="headerlink" title="理解逻辑上分离，物理上在一起"></a>理解逻辑上分离，物理上在一起</h4><ul><li>逻辑上分离：他们之前互相没有依赖，没有说必须启动一个才能启动另一个，没有说你不干活我就不干活。你启动你的我启动我的，互不影响。</li><li>物理上在一起：在物流层面，有可能部署在同一个机器上，每一个框都是一个独立的进程（四个JAVA进程都运行在一个机器上），但有的是属于HDFS集群，有的是属于YARN集群。</li></ul><p><img src="/2024/09/02/Hadoop/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/QQ_1727178489353.png" alt="QQ_1727178489353"></p><h4 id="MapReduce集群？"><a href="#MapReduce集群？" class="headerlink" title="MapReduce集群？"></a>MapReduce集群？</h4><p>是没有MapReduce集群的，MapReduce是一个计算框架，代码层面的组件，没有集群之说。</p><h2 id="Hadoop集群模式安装（Cluster-mode）"><a href="#Hadoop集群模式安装（Cluster-mode）" class="headerlink" title="Hadoop集群模式安装（Cluster mode）"></a>Hadoop集群模式安装（Cluster mode）</h2><p>补充1：配置Yum镜像源：</p><p>参考文章：<a href="https://blog.csdn.net/qq_36451127/article/details/140487779">https://blog.csdn.net/qq_36451127/article/details/140487779</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 备份原有镜像源</span><br><span class="hljs-built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br><br><span class="hljs-comment"># 下载镜像源</span><br>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-altarch-7.repo<br><br><span class="hljs-comment"># 清理更新</span><br>yum clean all<br>yum makecache<br></code></pre></td></tr></table></figure><h4 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h4><p>1）主机名：</p><p>首先需要保证每台机器有一个 独一无二 的主机名hostname</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/hostname<br><span class="hljs-built_in">cat</span> /etc/hostname<br></code></pre></td></tr></table></figure><p>2）hosts映射</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /etc/hosts<br><br>// 写入映射表<br>10.211.55.10 node1 node1.jcen<br>10.211.55.11 node2 node2.jcen<br>10.211.55.12 node3 node3.jcen<br></code></pre></td></tr></table></figure><p>3）防火墙配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">firewall-cmd --state <span class="hljs-comment"># 查看防火墙状态</span><br>systemctl stop firewalld.service <span class="hljs-comment"># 关闭防火墙</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld.service <span class="hljs-comment"># 关闭防火墙开机自启</span><br>systemctl status firewalld.service <span class="hljs-comment"># 查看防火墙状态</span><br><br><br></code></pre></td></tr></table></figure><p>4）SSH免密登录</p><p>可以在任意服务器使用 ssh node1&#x2F;node2&#x2F;node3 登录不同服务器，如果不行或者需要输入密码:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 生成密钥</span><br>ssh-keygen <span class="hljs-comment">#4个回车生成秘钥私钥</span><br>ssh-copy-id node1<br>ssh-copy-id node2<br>ssh-copy-id node3<br><span class="hljs-comment"># 输入密码</span><br><br><span class="hljs-comment"># 再使用ssh node1/node2/node3 登录，就不需要密码了。</span><br></code></pre></td></tr></table></figure><p>5）集群时间同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 这里使用aliyun的时间同步(3台机器)</span><br>yum -y install ntpdate<br>ntpdate ntp4.aliyun.com<br></code></pre></td></tr></table></figure><p>6）创建统一的工作目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /export/server <span class="hljs-comment"># 软件安装路径</span><br><span class="hljs-built_in">mkdir</span> -p /export/data <span class="hljs-comment"># 数据存储路径</span><br><span class="hljs-built_in">mkdir</span> -p /export/software <span class="hljs-comment"># 安装包路径</span><br></code></pre></td></tr></table></figure><p>7）安装JDK</p><p>可以直接上传JDK安装包，但是我这里是arm架构的，使用yum下载arm的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y list java*<br>yum install -y java-1.8.0-openjdk.aarch64<br><br>java -version <span class="hljs-comment"># java的安装目录为：/usr/lib/jvm</span><br><br><span class="hljs-comment"># 在/etc/profile下配置环境变量</span><br>vi /etc/profile<br> <br><span class="hljs-comment"># set java environment</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.el8_4.aarch64<br><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$JAVA_HOME</span>/jre<br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar<br><br><span class="hljs-comment"># 更新</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>8）补充：集群之间远程拷贝文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 示例：拷贝node1的jdk到node2</span><br>scp -r /export/server/jdk1.8/ root@node2:/export/server<br></code></pre></td></tr></table></figure><h4 id="Hadoop环境搭建"><a href="#Hadoop环境搭建" class="headerlink" title="Hadoop环境搭建"></a>Hadoop环境搭建</h4><p>1）修改hadoop的配置文件（hadoop-3.3.0&#x2F;etc&#x2F;hadoop）</p><ul><li><p>Hadoop-env.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /export/server/hadoop-3.3.0/etc/hadoop/hadoop-env.sh <br><br><span class="hljs-comment"># 在文件最后添加</span><br><span class="hljs-comment"># 指定Java目录</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/export/server/jdk1.8.0_241<br><br><span class="hljs-comment"># 指定使用者</span><br><span class="hljs-built_in">export</span> HDFS_NAMENODE_USER=root<br><span class="hljs-built_in">export</span> HDFS_DATANODE_USER=root<br><span class="hljs-built_in">export</span> HDFS_SECONDARYNAMENODE_USER=root<br><span class="hljs-built_in">export</span> YARN_RESOURCEMANAGER_USER=root<br><span class="hljs-built_in">export</span> YARN_NODEMANAGER_USER=root<br></code></pre></td></tr></table></figure></li><li><p>core-site.xml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;!-- 设置默认使用的文件系统 Hadoop支持file、HDFS、GFS、ali|Amazon云等文件系统 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;fs.defaultFS&lt;/name&gt;<br>    &lt;value&gt;hdfs://node1:8020&lt;/value&gt;<br>&lt;/property&gt;<br><br>&lt;!-- 设置Hadoop本地保存数据路径 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;<br>    &lt;value&gt;/export/data/hadoop-3.3.0&lt;/value&gt;<br>&lt;/property&gt;<br><br>&lt;!-- 设置HDFS web UI用户身份 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;hadoop.http.staticuser.user&lt;/name&gt;<br>    &lt;value&gt;root&lt;/value&gt;<br>&lt;/property&gt;<br><br>&lt;!-- 整合hive 用户代理设置 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;<br>    &lt;value&gt;*&lt;/value&gt;<br>&lt;/property&gt;<br><br>&lt;property&gt;<br>    &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;<br>    &lt;value&gt;*&lt;/value&gt;<br>&lt;/property&gt;<br><br>&lt;!-- 文件系统垃圾桶保存时间 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;fs.trash.interval&lt;/name&gt;<br>    &lt;value&gt;1440&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure></li><li><p>hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 设置SNN进程运行机器位置信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:9868<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 设置MR程序默认运行模式： yarn集群模式 local本地模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- MR程序历史服务地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- MR程序历史服务器web端地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 设置YARN集群主角色运行机器位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 是否将对容器实施物理内存限制 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 是否将对容器实施虚拟内存限制。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 开启日志聚集 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 设置yarn历史服务器地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log.server.url<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 历史日志保存的时间 7天 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>604800<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>workers</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">node1.<span class="hljs-keyword">jcen</span><br><span class="hljs-keyword"></span>node2.<span class="hljs-keyword">jcen</span><br><span class="hljs-keyword"></span>node3.<span class="hljs-keyword">jcen</span><br></code></pre></td></tr></table></figure></li></ul><p>分发同步hadoop安装包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /export/server<br><br><span class="hljs-comment"># $PWD 其他机器的相同位置</span><br>scp -r hadoop-3.3.0 root@node2:<span class="hljs-variable">$PWD</span><br>scp -r hadoop-3.3.0 root@node3:<span class="hljs-variable">$PWD</span><br></code></pre></td></tr></table></figure><p>3）将hadoop添加到环境变量（3台机器）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/profile<br><br><span class="hljs-built_in">export</span> HADOOP_HOME=/export/server/hadoop-3.3.0<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HADOOP_HOME</span>/bin:<span class="hljs-variable">$HADOOP_HOME</span>/sbin<br><br><span class="hljs-built_in">source</span> /etc/profile<br><br><br><span class="hljs-comment">#别忘了scp给其他两台机器哦</span><br></code></pre></td></tr></table></figure><p>4）Hadoop集群启动</p><ul><li><p>（首次启动）格式化namenode</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hdfs namenode -format<br></code></pre></td></tr></table></figure></li><li><p>脚本一键启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@node1 ~]# start-dfs.sh <br>Starting namenodes on [node1]<br>Last login: Thu Nov  5 10:44:10 CST 2020 on pts/0<br>Starting datanodes<br>Last login: Thu Nov  5 10:45:02 CST 2020 on pts/0<br>Starting secondary namenodes [node2]<br>Last login: Thu Nov  5 10:45:04 CST 2020 on pts/0<br><br>[root@node1 ~]# start-yarn.sh <br>Starting resourcemanager<br>Last login: Thu Nov  5 10:45:08 CST 2020 on pts/0<br>Starting nodemanagers<br>Last login: Thu Nov  5 10:45:44 CST 2020 on pts/0<br></code></pre></td></tr></table></figure></li><li><p>Web  UI页面</p><ul><li><p>HDFS集群：<a href="http://node1:9870/">http://node1:9870/</a></p></li><li><p>YARN集群：<a href="http://node1:8088/">http://node1:8088/</a></p></li></ul></li></ul><h2 id="Hadoop集群启停命令，WebUI"><a href="#Hadoop集群启停命令，WebUI" class="headerlink" title="Hadoop集群启停命令，WebUI"></a>Hadoop集群启停命令，WebUI</h2><p>node1:9870-&gt; <a href="http://10.211.55.10:9870/">http://10.211.55.10:9870/</a></p><p>node2:8088-&gt; <a href="http://10.211.55.10:8088/">http://10.211.55.10:8088/</a></p><p>扩展：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi命令学习：<br><br><span class="hljs-comment"># 保存文件</span><br>:wq<br><span class="hljs-built_in">shift</span> ZZ<br><br><span class="hljs-comment"># 到文件最后一行（G）并输入（o）</span><br>Go<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreeJs开发文档</title>
    <link href="/2024/09/02/ThreeJs%E5%AD%A6%E4%B9%A0/threeJs%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
    <url>/2024/09/02/ThreeJs%E5%AD%A6%E4%B9%A0/threeJs%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="初始化模版"><a href="#初始化模版" class="headerlink" title="初始化模版"></a>初始化模版</h2><h3 id="拉取项目"><a href="#拉取项目" class="headerlink" title="拉取项目"></a>拉取项目</h3><p>Starter CODE: <a href="https://www.youtube.com/redirect?event=comments&redir_token=QUFFLUhqbktHNk1meUJBc0Voc3Bid2FNWjRzTVltVUlFUXxBQ3Jtc0tuT1NjbUwzZ1lnTFZ0MHdmeFYyQTh3V0MyaEJJaDBhNEY5ZUlpcFctN0RLYW9vdUd6OWN5VnhOSVJZVkdqYWF5dzJwcUVuM1J4VTNicVlRcm5fUjlmbW5uOWt5bF9rZFVVa195c1BLMm1fWlMzenlzaw&q=https://github.com/codebucks27/Apple-iphone-3d-landing-page-starter-Code">https://github.com/codebucks27/Apple-iphone-3d-landing-page-starter-Code</a> </p><p>Final CODE: <a href="https://www.youtube.com/redirect?event=comments&redir_token=QUFFLUhqbGo0R2JfUDB5aER2NkM3MnNpU1k4dE9ZYmVfZ3xBQ3Jtc0tsZV80ZURhTUhfWGVDQ28zSVhGdnpoY1BlclVTRXNuMHJNMkt5U0w4Y1NKbUtCQ2YycGJjSmZJY2pGekc3eHFCMWRBdXZLX1dQMjl6bEZSZWdfU25hQmE2Q0cwQm1RblR2WHNNMk5nN1lyaU91c0dqZw&q=https://github.com/codebucks27/3D-Landing-page-for-Apple-iPhone">https://github.com/codebucks27/3D-Landing-page-for-Apple-iPhone</a> </p><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><h3 id="编写全局文件"><a href="#编写全局文件" class="headerlink" title="编写全局文件"></a>编写全局文件</h3><p>1）编写<code>GlobalStyle.js</code>定义全局样式，并在<code>App.js</code>引入</p><h3 id="编写Quete-js"><a href="#编写Quete-js" class="headerlink" title="编写Quete.js"></a>编写Quete.js</h3><p>1）新建<code>sections/Quote.js</code>文件，并且安装插件<code>ES7+ React/Redux/React-Native/JS snippets</code>  即可在<code>js</code>文件中使用 <code>rafce</code>生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Quote</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Quote<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Quote</span><br></code></pre></td></tr></table></figure><p>并且在<code>APP.js</code>引入</p><p>2）编写Quote.js，添加文字动画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> styled, &#123; keyframes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-comment">// 定义一个Section组件，使用styled-components库</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Section</span> = styled.<span class="hljs-property">section</span><span class="hljs-string">`</span><br><span class="hljs-string">  width: 100vw;</span><br><span class="hljs-string">  height: 100vh;</span><br><span class="hljs-string">  position: relative;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  justify-content: center;</span><br><span class="hljs-string">  align-items: center;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">TextContainer</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  width: 100%;</span><br><span class="hljs-string">  height: 100%;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  // 设置主轴方向为从上到下。</span><br><span class="hljs-string">  flex-direction: column;</span><br><span class="hljs-string">  // 在主轴上居中内容。</span><br><span class="hljs-string">  justify-content: center;</span><br><span class="hljs-string">  // 在交叉轴上居中内容。</span><br><span class="hljs-string">  align-items: center;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  background-color: var(--dark);</span><br><span class="hljs-string">  color: var(--white);</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> moveUp = keyframes<span class="hljs-string">`</span><br><span class="hljs-string">100%&#123;</span><br><span class="hljs-string">    transform: translateY(0);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Text</span> = styled.<span class="hljs-property">p</span><span class="hljs-string">`</span><br><span class="hljs-string">  width: 50%;</span><br><span class="hljs-string">  font-size: var(--fontlg);</span><br><span class="hljs-string">  position: relative;</span><br><span class="hljs-string">  height: var(--fontmd);</span><br><span class="hljs-string">  overflow: hidden;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  span &#123;</span><br><span class="hljs-string">    position: absolute;</span><br><span class="hljs-string">    transform: translateY(3rem);</span><br><span class="hljs-string">    animation-name: <span class="hljs-subst">$&#123;moveUp&#125;</span>;</span><br><span class="hljs-string">    animation-duration: 2.5s;</span><br><span class="hljs-string">    animation-timing-function: ease;</span><br><span class="hljs-string">    // 在动画完成后，保持动画的最终状态</span><br><span class="hljs-string">    animation-fill-mode: forwards;</span><br><span class="hljs-string">    animation-delay: <span class="hljs-subst">$&#123;(props) =&gt; props.delay&#125;</span>;</span><br><span class="hljs-string">    font-family: var(--fontL);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    // 通过背景渐变设置背景图片</span><br><span class="hljs-string">    background-image: linear-gradient(-45deg, var(--gradient));</span><br><span class="hljs-string">    // 通过背景剪切设置背景图片</span><br><span class="hljs-string">    background-clip: text;</span><br><span class="hljs-string">    // 针对webkit浏览器设置背景剪切</span><br><span class="hljs-string">    -webkit-background-clip: text;</span><br><span class="hljs-string">    // 针对webkit浏览器设置文本填充颜色</span><br><span class="hljs-string">    -webkit-text-fill-color: transparent;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  // 作者部分</span><br><span class="hljs-string">  .author &#123;</span><br><span class="hljs-string">    width: 100%;</span><br><span class="hljs-string">    text-align: end;</span><br><span class="hljs-string">    background-image: linear-gradient(-180deg, var(--gradient));</span><br><span class="hljs-string">    font-family: var(--fontR);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  @media screen and (max-width: 70em) &#123;</span><br><span class="hljs-string">    width: 70%;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  @media screen and (max-width: 48em) &#123;</span><br><span class="hljs-string">    font-size: var(--fontmd);</span><br><span class="hljs-string">    height: var(--fontsm);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  @media screen and (max-width: 40em) &#123;</span><br><span class="hljs-string">    width: 90%;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  @media screen and (max-width: 30em) &#123;</span><br><span class="hljs-string">    font-size: var(--fontxs);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Quote</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">TextContainer</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;0s&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;&quot; &quot;&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;#8220;</span> You can&#x27;t connect the dots looking forward;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            &#123;&quot; &quot;&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;0.4s&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;&quot; &quot;&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>you can only connect them looking backward.</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            &#123;&quot; &quot;&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;0.8s&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;&quot; &quot;&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>so you have to trust that the dots<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            &#123;&quot; &quot;&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;1.2s&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;&quot; &quot;&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>will somehow connect in your future. <span class="hljs-symbol">&amp;#8221;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            &#123;&quot; &quot;&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;1.6s&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;&quot; &quot;&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><span class="hljs-symbol">&amp;#x23AF;</span> Steve Jobs<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            &#123;&quot; &quot;&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">TextContainer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Quote</span><br></code></pre></td></tr></table></figure><h3 id="编写HeroSection-js"><a href="#编写HeroSection-js" class="headerlink" title="编写HeroSection.js"></a>编写HeroSection.js</h3><p>1）新建section&#x2F;HeroSection.js文件，输入<code>rafce</code>生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">HeroSection</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HeroSection<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HeroSection</span><br></code></pre></td></tr></table></figure><p>2）在<code>App.js</code>引入HeroSection组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HeroSection</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./sections/HeroSection&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HeroSection</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>3）编写HeroSection.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><span class="hljs-keyword">import</span> backgroundVideo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../assets/video/Ink - 21536.mp4&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Section</span> = styled.<span class="hljs-property">section</span><span class="hljs-string">`</span><br><span class="hljs-string">  width: 100vw;</span><br><span class="hljs-string">  height: 100vh;</span><br><span class="hljs-string">  position: relative;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  justify-content: flex-end;</span><br><span class="hljs-string">  align-items: center;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  background-color: var(--dark);</span><br><span class="hljs-string">  overflow: hidden;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Title</span> = styled.<span class="hljs-property">h1</span><span class="hljs-string">`</span><br><span class="hljs-string">  position: absolute;</span><br><span class="hljs-string">  top: 2rem;</span><br><span class="hljs-string">  left: 2rem;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  font-size: var(--fontlg);</span><br><span class="hljs-string">  font-family: var(--fontL);</span><br><span class="hljs-string">  color: var(--greyLight);</span><br><span class="hljs-string"></span><br><span class="hljs-string">  @media screen and (max-width: 48em) &#123;</span><br><span class="hljs-string">    font-size: var(--fontmd);</span><br><span class="hljs-string">    left: 1rem;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  @media screen and (max-width: 30em) &#123;</span><br><span class="hljs-string">    width: 70%;</span><br><span class="hljs-string">    color: var(--white);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">TextContainer</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  width: 100%;</span><br><span class="hljs-string">  height: 100vh;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  justify-content: space-between;</span><br><span class="hljs-string">  align-items: center;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  background-image: linear-gradient(45deg, var(--gradient));</span><br><span class="hljs-string">  background-clip: text;</span><br><span class="hljs-string">  -webkit-background-clip: text;</span><br><span class="hljs-string">  -webkit-text-fill-color: transparent;</span><br><span class="hljs-string">  z-index: 1;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  span &#123;</span><br><span class="hljs-string">    font-size: var(--fontxxxl);</span><br><span class="hljs-string">    text-transform: uppercase;</span><br><span class="hljs-string">    font-weight: 600;</span><br><span class="hljs-string">    padding: 2rem;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @media screen and (max-width: 64em) &#123;</span><br><span class="hljs-string">      font-size: var(--fontxxl);</span><br><span class="hljs-string">      padding: 0;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    @media screen and (max-width: 48em) &#123;</span><br><span class="hljs-string">      font-size: var(--fontxl);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  @media screen and (max-width: 48em) &#123;</span><br><span class="hljs-string">    flex-direction: column;</span><br><span class="hljs-string">    background-image: linear-gradient(90deg, var(--gradient));</span><br><span class="hljs-string">    align-items: flex-start;</span><br><span class="hljs-string">    filter: brightness(1.1);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &amp; &gt; *:last-child &#123;</span><br><span class="hljs-string">      align-self: flex-end;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    height: 80vh;</span><br><span class="hljs-string">    padding: 0 1rem;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">VideoContainer</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  width: 100vw;</span><br><span class="hljs-string">  min-height: 100vh;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  position: absolute;</span><br><span class="hljs-string">  top: 0;</span><br><span class="hljs-string">  left: 0;</span><br><span class="hljs-string">  z-index: 0;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  video &#123;</span><br><span class="hljs-string">    width: 100%;</span><br><span class="hljs-string">    height: 100vh;</span><br><span class="hljs-string">    object-fit: cover;</span><br><span class="hljs-string">    object-position: bottom;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">HeroSection</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">VideoContainer</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;backgroundVideo&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span> <span class="hljs-attr">autoPlay</span> <span class="hljs-attr">muted</span> <span class="hljs-attr">loop</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">VideoContainer</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span>iPhone 14 Pro Max<span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TextContainer</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>So.Cold.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>So.Bold.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">TextContainer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HeroSection</span><br></code></pre></td></tr></table></figure><h3 id="模型格式转化"><a href="#模型格式转化" class="headerlink" title="模型格式转化"></a>模型格式转化</h3><p>1）gltf格式的3D模型需要格式转化</p><p>使用github项目：<a href="https://github.com/pmndrs/gltfjsx">https://github.com/pmndrs/gltfjsx</a></p><p>使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">npx gltfjsx model.gltf --transform<br>// 指定model.gltf，生成model.jsx文件<br></code></pre></td></tr></table></figure><h3 id="编写HeroSection-js-1"><a href="#编写HeroSection-js-1" class="headerlink" title="编写HeroSection.js"></a>编写HeroSection.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Canvas</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-three/fiber&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">OrbitControls</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-three/drei&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Model</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../assets/3D-Model/Scene&quot;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Environment</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-three/drei&quot;</span>;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Container</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  width: 100vw;</span><br><span class="hljs-string">  height: 100vh;</span><br><span class="hljs-string">  position: fixed;</span><br><span class="hljs-string">  top: 0;</span><br><span class="hljs-string">  z-index: 1;</span><br><span class="hljs-string">  background-color: transparent;</span><br><span class="hljs-string">  transition: all 0.3s ease;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ambientLight是一个环境光，可以照亮整个场景</span><br><span class="hljs-comment"> * directionalLight是一个平行光，可以照亮整个场景</span><br><span class="hljs-comment"> * position=&#123;[0, 0, 5]&#125; 表示光源的位置在 (0, 0, 5) </span><br><span class="hljs-comment"> * 改变光源的位置和方向可以改变场景的光照效果</span><br><span class="hljs-comment"> * mesh是一个容器，可以包含多个子元素</span><br><span class="hljs-comment"> * boxGeometry是一个立方体</span><br><span class="hljs-comment"> * OrbitControls是一个控制器，可以控制相机的位置和方向</span><br><span class="hljs-comment"> * meshStandardMaterial是一个材质，可以控制物体的颜色和光照效果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">PhoneModel</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Container</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;phone-model&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Canvas</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">ambientLight</span> <span class="hljs-attr">intensity</span>=<span class="hljs-string">&#123;1.25&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">directionalLight</span> <span class="hljs-attr">intensity</span>=<span class="hljs-string">&#123;0.4&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Model</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Environment</span> <span class="hljs-attr">preset</span>=<span class="hljs-string">&quot;night&quot;</span> /&gt;</span></span><br><span class="language-xml">            &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">mesh</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">boxGeometry</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">meshStandardMaterial</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">mesh</span>&gt;</span> */&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">OrbitControls</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Canvas</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PhoneModel</span><br></code></pre></td></tr></table></figure><p>2）环境光可以参考：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Environment</span> preset=<span class="hljs-string">&quot;night&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p><a href="https://docs.pmnd.rs/">https://docs.pmnd.rs/</a></p>]]></content>
    
    
    <categories>
      
      <category>ThreeJs学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThreeJs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装软件</title>
    <link href="/2024/09/02/docker/Docker%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    <url>/2024/09/02/docker/Docker%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker安装软件"><a href="#Docker安装软件" class="headerlink" title="Docker安装软件"></a>Docker安装软件</h2><h3 id="docker-安装redis"><a href="#docker-安装redis" class="headerlink" title="docker 安装redis"></a>docker 安装redis</h3><p>1）从 Docker Hub 拉取官方 Redis 镜像：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull redis</span><br></code></pre></td></tr></table></figure><p>启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name redis -p 6379:6379 redis redis-server --requirepass <span class="hljs-string">&quot;liangquan0302&quot;</span><br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>-d：后台运行容器</li><li>–name my-redis：将容器命名为 “my-redis”</li><li>-p 6379:6379：将容器中的端口 6379 映射到主机上的端口 6379</li><li>redis：指定要运行的镜像</li><li>redis-server –requirepass “my-password”：运行 Redis 服务器并要求密码 “my-password”</li></ul><p>2）检查连接</p><ol><li>检查 Redis 容器是否正在运行：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span><br></code></pre></td></tr></table></figure><p>输出应显示容器 “my-redis” 正在运行。</p><ol start="2"><li>使用以下命令连接到 Redis 容器：</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> <span class="hljs-keyword">my</span>-redis redis-cli<br></code></pre></td></tr></table></figure><ol start="3"><li>使用设置的密码身份验证：</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">AUTH <span class="hljs-keyword">my</span>-password<br></code></pre></td></tr></table></figure><ol start="4"><li>验证连接：</li></ol><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">PING</span><br></code></pre></td></tr></table></figure><p>如果输出为 “PONG”，则表示您已成功连接到 Redis 容器。</p><h3 id="docker安装RabbitMQ"><a href="#docker安装RabbitMQ" class="headerlink" title="docker安装RabbitMQ"></a>docker安装RabbitMQ</h3><p>1）拉取 RabbitMQ 镜像**</p><ol><li>从 Docker Hub 拉取官方 RabbitMQ 镜像：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull rabbitmq</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用以下命令创建 RabbitMQ 容器并将其命名为 “rabbitmq”：</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d --name rabbitmq -p <span class="hljs-number">5672</span>:<span class="hljs-number">5672</span> -p <span class="hljs-number">15672</span>:<span class="hljs-number">15672</span> rabbitmq<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>-d：后台运行容器</li><li>–name my-rabbitmq：将容器命名为 “my-rabbitmq”</li><li>-p 5672:5672：将容器中的端口 5672 映射到主机上的端口 5672（AMQP）</li><li>-p 15672:15672：将容器中的端口 15672 映射到主机上的端口 15672（管理界面）</li><li>rabbitmq：指定要运行的镜像</li></ul><p>2）检查连接</p><p>检查 RabbitMQ 容器是否正在运行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span><br></code></pre></td></tr></table></figure><p><strong>配置 RabbitMQ</strong></p><ol><li>访问 RabbitMQ 管理界面：<a href="https://www.google.com/url?sa=E&q=http://localhost:15672/">http://localhost:15672/</a></li><li>使用默认凭据（用户名：guest，密码：guest）登录。</li><li>导航到 “Virtual hosts” 选项卡。</li><li>单击 “Add a new virtual host” 按钮。</li><li>输入虚拟主机的名称（例如，”my-vhost”）。</li><li>单击 “Add virtual host” 按钮。</li><li>导航到 “Users” 选项卡。</li><li>单击 “Add a new user” 按钮。</li><li>输入新用户的名称（例如，”my-user”）、密码（例如，”my-password”）和虚拟主机（例如，”my-vhost”）。</li><li>单击 “Add user” 按钮。</li><li>导航到 “Permissions” 选项卡。</li><li>在 “Virtual host” 下拉列表中选择要授予权限的虚拟主机（例如，”my-vhost”）。</li><li>在 “User” 下拉列表中选择要授予权限的用户（例如，”my-user”）。</li><li>选中 “Configure permissions” 部分中所需的权限（例如，”Read”、”Write”）。</li><li>单击 “Set permissions” 按钮。</li></ol><p>3）验证配置</p><ol><li>使用以下命令连接到 RabbitMQ 容器：</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> <span class="hljs-keyword">my</span>-rabbitmq rabbitmqctl status<br></code></pre></td></tr></table></figure><p>输出应显示 RabbitMQ 服务器正在运行。</p><ol><li>使用以下命令检查虚拟主机是否存在：</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> <span class="hljs-keyword">my</span>-rabbitmq rabbitmqctl list_vhosts<br></code></pre></td></tr></table></figure><p>输出应包含您创建的虚拟主机（例如，”my-vhost”）。</p><ol><li>使用以下命令检查用户是否存在：</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> <span class="hljs-keyword">my</span>-rabbitmq rabbitmqctl list_users<br></code></pre></td></tr></table></figure><p>输出应包含您创建的用户（例如，”my-user”）。</p><h4 id="ps-如果访问管理页面访问不到"><a href="#ps-如果访问管理页面访问不到" class="headerlink" title="ps 如果访问管理页面访问不到"></a>ps 如果访问管理页面访问不到</h4><p>进入容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 容器<span class="hljs-built_in">id</span> /bin/bash<br></code></pre></td></tr></table></figure><p>执行命令:</p><p><strong>开启界面插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次collabora online安装部署</title>
    <link href="/2024/09/02/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8collabora/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2online/"/>
    <url>/2024/09/02/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8collabora/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2online/</url>
    
    <content type="html"><![CDATA[<blockquote><p>环境：centos-7，docker-26.0.2</p></blockquote><p><a name="lVYiy"></a></p><h1 id="一：安装部署online"><a href="#一：安装部署online" class="headerlink" title="一：安装部署online"></a>一：安装部署online</h1><p>安装docker&#96;&#96;&#96;</p><ol><li>更新系统<br>sudo yum update</li><li>安装依赖<br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</li><li>添加 Docker CE 仓库<br>sudo yum-config-manager –add-repo <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a></li><li>安装 Docker CE软件包<br>sudo yum install docker-ce docker-ce-cli containerd.io</li><li>启动 Docker 服务<br>sudo systemctl start docker</li><li>设置 Docker 开机启动<br>sudo systemctl enable docker</li><li>验证安装<br>sudo docker –version</li><li>拉取nginx测试<br>sudo docker pull nginx<br>sudo docker run –name nginx -p 80:80 -d nginx<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">安装配置docker collabora online&gt; 拉取启动collabora/<span class="hljs-meta">code</span>镜像<br><br></code></pre></td></tr></table></figure>docker run -t -d <br>–name collabora <br>-p 9980:9980 <br>-e username&#x3D;admin <br>-e password&#x3D;admin <br>–restart always <br>–cap-add MKNOD <br>-v &#x2F;home&#x2F;docker&#x2F;coolwsd.xml:&#x2F;etc&#x2F;coolwsd&#x2F;coolwsd.xml <br>-v &#x2F;home&#x2F;fonts:&#x2F;opt&#x2F;cool&#x2F;systemplate&#x2F;usr&#x2F;share&#x2F;fonts&#x2F;truetype <br>-v &#x2F;home&#x2F;fonts:&#x2F;usr&#x2F;share&#x2F;fonts&#x2F;truetype <br>collabora&#x2F;code<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&gt; 运行后使用docker ps查看是否运行成功：<br><br>![image.png]<span class="hljs-params">(https://cdn.nlark.com/yuque/0/2024/png/28846352/1714094796085-23a3a180-6572-49d1-97bd-e4fe10ec4e8b.png#<span class="hljs-attr">averageHue</span>=%232a4a5f&amp;<span class="hljs-attr">clientId</span>=u308c2fc1-99ff-4&amp;<span class="hljs-attr">from</span>=paste&amp;<span class="hljs-attr">height</span>=108&amp;<span class="hljs-attr">id</span>=u6352cb75&amp;<span class="hljs-attr">originHeight</span>=121&amp;<span class="hljs-attr">originWidth</span>=1270&amp;<span class="hljs-attr">originalType</span>=binary&amp;<span class="hljs-attr">ratio</span>=1.125&amp;<span class="hljs-attr">rotation</span>=0&amp;<span class="hljs-attr">showTitle</span>=false&amp;<span class="hljs-attr">size</span>=183001&amp;<span class="hljs-attr">status</span>=done&amp;<span class="hljs-attr">style</span>=none&amp;<span class="hljs-attr">taskId</span>=ud6db562c-4cdb-45e1-8fcc-313cda5924b&amp;<span class="hljs-attr">title</span>=&amp;<span class="hljs-attr">width</span>=1128.888888888889)</span><br>&gt; Online默认使用SSH，进入进入挂载的配置文件修改禁用SSH已经运行访问的主机名及端口<br>&gt; 这里的&lt;clientHost&gt;：为客户端的ipv4地址，3000为SDK启动端口，根据实际修改<br>&gt; &lt;group&gt;&lt;<span class="hljs-string">/group</span>&gt;可配置多个&lt;host&gt;标签<br><br></code></pre></td></tr></table></figure>挂载卷：-v &#x2F;home&#x2F;docker&#x2F;coolwsd.xml:&#x2F;etc&#x2F;coolwsd&#x2F;coolwsd.xml \</li><li>禁用SSL<ssl desc="SSL settings"> <enable type="bool" desc="xxx." default="true">false</enable></ssl></li><li>配置域名允许访问<group> <host desc="hostname to allow or deny." allow="true">http://<clientHost>:3000</clientHost></host></group><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">配置好以后保存重启docker <span class="hljs-title class_">Online</span>服务，同上查看是否启动服务端口</span><br><br></code></pre></td></tr></table></figure></li><li>重启collabora<br>docker restart collabora</li><li>查看是否启动<br>docker ps</li><li>输出日志信息<br>docker logs -f collabora<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; 在浏览器输入http://&lt;serverHost&gt;:9980，返回ok表示部署Online成功：<br><br>![image.png](/安装部署online/image%20(1).png)<br>&gt; 浏览器输入：http://&lt;serverHost&gt;:9980/browser/dist/admin/admin.html，输入docker run时配置的账号密码，访问online控制台，可显示连接的wopi主机和打开的文档，和查看在线用户<br><br>![image.png](安装部署online/image%20(2).png)&lt;br /&gt;![image.png](安装部署online/image%20(3).png)<br>&lt;a name=<span class="hljs-string">&quot;Cd68k&quot;</span>&gt;&lt;/a&gt;<br><span class="hljs-comment"># 二：连接online</span><br>&lt;a name=<span class="hljs-string">&quot;cCzwU&quot;</span>&gt;&lt;/a&gt;<br><span class="hljs-comment">## 一：下载SDK，连接Online</span><br>下载CollaboraOnlineSDK，这里使用NodeJs框架&lt;br /&gt;[GitHub - CollaboraOnline/collabora-online-sdk-examples: Various minor pieces of code to be used <span class="hljs-keyword">in</span> Collabora Online and related software](https://github.com/CollaboraOnline/collabora-online-sdk-examples)<br>打开node.js 框架```<br>1. 安装依赖<br>npm intall<br>2. 启动客户端<br>npm start<br></code></pre></td></tr></table></figure>![image.png](<a href="https://img-blog.csdn/Users/liangquan/Downloads/image">https://img-blog.csdn/Users/liangquan/Downloads/image</a> (3).png &#x2F;Users&#x2F;liangquan&#x2F;Downloads&#x2F;image (2).png &#x2F;Users&#x2F;liangquan&#x2F;Downloads&#x2F;image (1).pngimg.cn&#x2F;img_convert&#x2F;9fed88617a6556f47f4adcc4b0e1b4d7.png)<blockquote><p>这里的localhost改为客户端服务器的ipv4地址：</p></blockquote></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/f574fee5d7c322e1a4e2a538b4902686.png" alt="image.png"></p><blockquote><p>浏览器访问客户端服务：http:&#x2F;&#x2F;<clientHost>:3000</clientHost></p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/725f5b3f9504505218ac5dc982d04f6e.png" alt="image.png"></p><blockquote><p>在<strong>Collabora Online Server</strong>框中输入Online地址http:&#x2F;&#x2F;<serverHost>:9980，点击<strong>Load Collabora Online</strong>即可在下方ifram标签中查看到默认的HelloWorld   </serverHost></p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/2ca32f99ceddebd7c9ce68148e5dcacc.png" alt="image.png"><br><a name="JpGfI"></a></p><h1 id="二：整合"><a href="#二：整合" class="headerlink" title="二：整合"></a>二：整合</h1><ol><li>获取discovery.xml<blockquote><p>访问：https:&#x2F;&#x2F;<serverHost>:<port>&#x2F;hosting&#x2F;discovery</port></serverHost></p></blockquote></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/22bf8ab027e611caa7aae59a9efd37c4.png" alt="image.png"></p><blockquote><p>返回的discovery.xml，其中包含各种文件格式的_urlsrc_ 。 urlsrc指定为文档编辑而创建的 iframe 需要使用的地址</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/87d7385c2607f435eb29c9014a3f4601.png" alt="image.png"></p><blockquote><p>获取到discovery.xml以后在客户端找到需要的文件格式，返回url和token(为给定文件和用户生成令牌（可将其存储在数据库中，可以选择过期))</p></blockquote><ol start="2"><li>Online客户端提供GetFile&#x2F;PutFile&#x2F;CheckFileInfo<ol><li><strong>CheckFileInfo</strong>，当调用时以 json 形式返回文件的 BaseFileName 和 Size</li></ol></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/c4d966ed48972ab6db10ce44ab13ebb2.png" alt="image.png"></p><ol start="2"><li><strong>GetFile</strong>，当调用时发送回文件的内容</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/977af55cf5619116a46882455235cdd1.png" alt="image.png"></p><ol start="3"><li><strong>PutFile</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/7365b7eecea51c94e647088a69d2d688.png" alt="image.png"></p><ol start="3"><li>设置页面中文<blockquote><p>docker服务默认安装了中文字体，可在ifream的url上加参数：&amp;lang&#x3D;zh-cn，但是汉化不是很完善</p></blockquote></li></ol><p>http:&#x2F;&#x2F;<serverHost>:<port>&#x2F;browser&#x2F;baa6eef&#x2F;cool.html?WOPISrc&#x3D;http:&#x2F;&#x2F;<clientHost>:<port>&#x2F;wopi&#x2F;files&#x2F;<id>&amp;lang&#x3D;zh-cn<br><img src="https://img-blog.csdnimg.cn/img_convert/592449efcdbff06fd1384877f1099980.png" alt="image.png"><br><a name="NlWiU"></a></id></port></clientHost></port></serverHost></p><h1 id="三：增加字体"><a href="#三：增加字体" class="headerlink" title="三：增加字体"></a>三：增加字体</h1><p>增加字体&gt; 挂载卷：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">-v <span class="hljs-regexp">/home/</span>fonts:<span class="hljs-regexp">/opt/</span>cool<span class="hljs-regexp">/systemplate/u</span>sr<span class="hljs-regexp">/share/</span>fonts/truetype \<br>-v <span class="hljs-regexp">/home/</span>fonts:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/fonts/</span>truetype \<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7e1573ac3db1a80a04051a5b10e67318.png" alt="image.png"></p><blockquote><p>docker restart collabora，重启容器<br>docker exec -it collabora bash，进入容器<br>fc-cache -fv   ，重建字体缓存<br>coolconfig update-system-template   ，更新系统配置</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/d53aadd620dc00ba46c799a5a5439870.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>在线编辑器collabora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>collabora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一节-操作系统的概念和定义</title>
    <link href="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%80%E8%8A%82-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%AE%9A%E4%B9%89/"/>
    <url>/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%80%E8%8A%82-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%AE%9A%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第一节-操作系统的概念和定义"><a href="#第一节-操作系统的概念和定义" class="headerlink" title="第一节-操作系统的概念和定义"></a>第一节-操作系统的概念和定义</h1><p>概念（定义）</p><p>功能和目标</p><h3 id="操作系统的概念（定义）"><a href="#操作系统的概念（定义）" class="headerlink" title="操作系统的概念（定义）"></a>操作系统的概念（定义）</h3><p>硬件+操作系统+软件+用户</p><p>操作系统（Operation System，OS）是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织调度计算机的工作和资源的分配；提供给用户和其他软件方便的接口和环境；他是计算机系统中最基本的 系统软件。</p><p>总结就是：</p><ol><li>操作系统是系统资源的管理者</li><li>向上层提供方便易用服务</li><li>是最接近硬件的一层软件</li></ol><h3 id="功能和目标"><a href="#功能和目标" class="headerlink" title="功能和目标"></a>功能和目标</h3>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二节-进程的描述与控制</title>
    <link href="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/"/>
    <url>/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="第二节-进程的描述与控制"><a href="#第二节-进程的描述与控制" class="headerlink" title="第二节-进程的描述与控制"></a>第二节-进程的描述与控制</h1><p>进程的概念：理解进程和程序的区别</p><p>进程的组成：一个进程由哪些部分组成</p><p>进程的特征：进程有哪些重要特征</p><h2 id="进程的概念，组成和特征"><a href="#进程的概念，组成和特征" class="headerlink" title="进程的概念，组成和特征"></a>进程的概念，组成和特征</h2><h3 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h3><h3 id="进程的组成-PCB"><a href="#进程的组成-PCB" class="headerlink" title="进程的组成-PCB"></a>进程的组成-PCB</h3><p>操作系统要记录PID，进程所属的用户ID(UID)，还要记录给进程分配了那些资源（如分配了多少内存，正在使用那些I&#x2F;O设备，正在使用那些文件），还要记录进程的运行情况（如CPU的使用时间，磁盘的使用情况，网络流量的使用情况等）这些信息都被保存在一个数据结构：PCB(Process Control Block)，即 进程控制块 中。</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727069553722.png" alt="QQ_1727069553722"></p><p>操作系统对进程的管理工作所需的信息都存在PCB中。</p><p>进程（进程实体）的组成</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727069706417.png" alt="QQ_1727069706417"></p><p>还有 程序段和数据段，他们是给进程自己使用的，PCB是给操作系统使用的。</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727069881689.png" alt="QQ_1727069881689"></p><p>进程实体就相当于一个 快照，是一瞬间的不变的静态的，而进程是动态的</p><p>程序段，数据段，PCB三部分组成了进程实体（进程映像）一如进程实体的概念后，可以把进程定义为：进程是进程实体的 运行过程，是系统进程 资源分配 和 调度 的一个独立单位。</p><p>注意：PCB 是 进程存在 的唯一标识！</p><h3 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h3><p>1）动态性</p><p>2）并发性</p><p>3）独立性</p><p>4）异步性</p><p>5）结构性</p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727070274822.png" alt="QQ_1727070274822" style="zoom:25%;"><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727070347312.png" alt="QQ_1727070347312"></p><h2 id="进程的状态与转换"><a href="#进程的状态与转换" class="headerlink" title="进程的状态与转换"></a>进程的状态与转换</h2><p>进程的状态：创建态，就绪态，运行态，阻塞态，终止态</p><p>进程的五状态模型（丁字裤模型）：</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727070881595.png" alt="QQ_1727070881595"></p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727071027594.png" alt="QQ_1727071027594"></p><p>为了同一个状态下的各个进程进行管理，操作系统会将各个进程的PCB组织起来：</p><p>进程的组织-链接方式</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727071198960.png" alt="QQ_1727071198960"></p><p>进程的组织-索引方式（不重要）</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727071220746.png" alt="QQ_1727071220746"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727071249786.png" alt="QQ_1727071249786"></p><h2 id="进程的控制"><a href="#进程的控制" class="headerlink" title="进程的控制"></a>进程的控制</h2><p>进程的控制的主要功能是对系统中所有进程实施有效的管理，它具有创建新进程，撤销已有进程，实现进程状态转换等功能。（反正进程控制就是要是实现进程状态转换）。</p><ul><li>什么是进程控制？</li><li>如何实现进程控制？（用原语实现）</li><li>进程控制的原语<ul><li>进程的创建</li><li>进程的终止</li><li>进程的阻塞</li><li>进程的唤醒</li><li>进程的切换</li></ul></li></ul><p>如何实现原语的”原子性“</p><p>原语的执行具有原子性，执行过程是一气呵成的，期间不允许被中断，可以用”关中断指令“和“开终端指令”时间原子性：</p><p>正常情况下：CPU每执行完一条指令都会例行检查是否有中断信号需要处理，如果有就暂停运行当前这段程序，转而执行相应的中断处理程序。</p><p>但是如果有”关中断指令“，CPU在执行”开中断指令“之前就不会去检查外部的中断信号</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727073407286.png" alt="QQ_1727073407286"></p><h4 id="进程控制的相关原语"><a href="#进程控制的相关原语" class="headerlink" title="进程控制的相关原语"></a>进程控制的相关原语</h4><h5 id="1）进程创建："><a href="#1）进程创建：" class="headerlink" title="1）进程创建："></a>1）进程创建：</h5><p>创建原语：操作系统在创建一个进程的时候使用的原语。</p><ol><li>申请一个空白的PCB</li><li>为新进程分配所需资源</li><li>初始化PCB</li><li>将PCB插入到就绪队列</li></ol><p>创建原语，就是吧一个进程从创建态变为就绪态</p><h5 id="2）进程终止"><a href="#2）进程终止" class="headerlink" title="2）进程终止"></a>2）进程终止</h5><p>撤销原语：就绪态&#x2F;阻塞态&#x2F;运行态-&gt;阻止态-&gt;回收</p><ol><li>从PCB集合中找到终止进程的PCB</li><li>若进程正在运行，立刻剥夺CPU，将CPU分配给其他进程</li><li>终止其他子进程（进程之间的关系是树结构）</li><li>将该进程拥有的全部资源归还给父进程或操作系统</li><li>删除PCB</li></ol><p>引发进程中止的事件：</p><ol><li>正常结束</li><li>异常结束</li><li>外部干预</li></ol><h5 id="3）进程的阻塞和唤醒"><a href="#3）进程的阻塞和唤醒" class="headerlink" title="3）进程的阻塞和唤醒"></a>3）进程的阻塞和唤醒</h5><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727074109951.png" alt="QQ_1727074109951"></p><h5 id="4）切换原语"><a href="#4）切换原语" class="headerlink" title="4）切换原语"></a>4）切换原语</h5><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727074621135.png" alt="QQ_1727074621135"></p><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727074544322.png" alt="QQ_1727074544322"></p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727074594215.png" alt="QQ_1727074594215"></p><h2 id="进程的通信"><a href="#进程的通信" class="headerlink" title="进程的通信"></a>进程的通信</h2><p>进程之间通信（Inter-Process Communication，IPC）指的是两个进程之间产生数据交互。</p><h4 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h4><p>进程可以申请一块 共享存储区 这个区域的数据其他进程也可以访问！</p><p>为了避免出错，冲突等，各个进程对共享存储区域的访问应该是 互斥 的 ，</p><p>各个进程可以使用操作系统内核提供的同步互斥工具（如P、V操作）</p><h5 id="基于数据结构的共享"><a href="#基于数据结构的共享" class="headerlink" title="基于数据结构的共享"></a>基于数据结构的共享</h5><p>基于数据结构的共享：比如共享空间只能存放一个长度为10的数组。这种共享方式速度慢，限制多，是一种低级通信方式。</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727075921825.png" alt="QQ_1727075921825"></p><h5 id="基于存储区的共享"><a href="#基于存储区的共享" class="headerlink" title="基于存储区的共享"></a>基于存储区的共享</h5><p>基于存储区的共享：操作系统在内存中划出一块存储区，数据的形式，存放位置都是通信进程控制的，而不是操作系统。这种方式共享速度快，是一中 高级通信 方式</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727075930329.png" alt="QQ_1727075930329"></p><h4 id="信息传递"><a href="#信息传递" class="headerlink" title="信息传递"></a>信息传递</h4><p>进程之间的数据交换以 格式化的消息（Message）为单位。进程通过操作系统提供的 ”发送消息“&#x2F;“接收消息” 的两个 原语 来进行数据交换。</p><p>格式化的消息：消息头（谁发送，发给谁等），消息体</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727076187781.png" alt="QQ_1727076187781"></p><h5 id="直接通信方式"><a href="#直接通信方式" class="headerlink" title="直接通信方式"></a>直接通信方式</h5><p>消息发送进程要指明接收消息的进程ID</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727076346303.png" alt="QQ_1727076346303"></p><p>进程P向进程Q发消息，先封装好msg，调用send发送给Q，在进程Q的PCB中的消息队列里接收到消息，Q再使用receive获取P发送的消息即可。</p><h5 id="间接通信方式"><a href="#间接通信方式" class="headerlink" title="间接通信方式"></a>间接通信方式</h5><p>通过“信箱” 间接的通信，因此又称为 “信箱通信方式”。</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727076551318.png" alt="QQ_1727076551318"></p><p>注意体会和直接通信的区别。</p><h4 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h4><p>管道（pipe）：FIFO</p><p>进程P写数据到管道，进程Q从管道读数据</p><p>这个数据的流向是单项的</p><p>管道和共享内存的区别：</p><ol><li><p>共享存储的区域，随便你写数据到哪里，哪里有位置你就写在哪里，不依次，</p></li><li><p>而管道通信室先进先出，从头到尾的写，取数据也是从头到尾的读，依次。（数据流）</p></li></ol><p>管道只能采用半双工通信，某一时间端只能实现单向传输，如果需要实现双向同时传输，需要申请两个管道。</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727076947753.png" alt="QQ_1727076947753"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727077097777.png" alt="QQ_1727077097777"></p><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727077566021.png" alt="QQ_1727077566021"></p><p>引入线程之后，线程成为了程序执行的最小基本单位</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727078477856.png" alt="QQ_1727078477856"></p><p>所谓线程可以理解为 “轻量级的进程” </p><p>线程 是一个 基本的CPU执行单位，也是程序执行流的最小单位，不仅进程可以并发执行，进程里面的线程也可以并发执行</p><p>引入线程后，进程只作为除CPU之外的系统资源的分配单元（如打印机，内存地址空间，都是分配给进程的的）</p><h5 id="引入线程-带来的变化"><a href="#引入线程-带来的变化" class="headerlink" title="引入线程-带来的变化"></a>引入线程-带来的变化</h5><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727078682964.png" alt="QQ_1727078682964"></p><h5 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h5><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727078812095.png" alt="QQ_1727078812095"></p><h2 id="线程的实现方式和多线程模型"><a href="#线程的实现方式和多线程模型" class="headerlink" title="线程的实现方式和多线程模型"></a>线程的实现方式和多线程模型</h2><h3 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h3><h4 id="用户级线程（UserLevel-Thread，ULT）："><a href="#用户级线程（UserLevel-Thread，ULT）：" class="headerlink" title="用户级线程（UserLevel Thread，ULT）："></a>用户级线程（UserLevel Thread，ULT）：</h4><p>是程序员通过线程库实现的</p><p>1）线程管理是由线程库来完成的</p><p>2）线程切换不需要CPU的变态（用户态-》内核态）</p><p>3）操作系统不能意识到用户级线程的存在</p><h4 id="内核级线程"><a href="#内核级线程" class="headerlink" title="内核级线程"></a>内核级线程</h4><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727079584982.png" alt="QQ_1727079584982"></p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727079687370.png" alt="QQ_1727079687370" style="zoom:25%;"><h3 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h3><h4 id="一对一模型"><a href="#一对一模型" class="headerlink" title="一对一模型"></a>一对一模型</h4><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727079732194.png" alt="QQ_1727079732194"></p><h4 id="多对一模型"><a href="#多对一模型" class="headerlink" title="多对一模型"></a>多对一模型</h4><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727079756443.png" alt="QQ_1727079756443"></p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727079769095.png" alt="QQ_1727079769095" style="zoom:50%;"><h4 id="多对多模型"><a href="#多对多模型" class="headerlink" title="多对多模型"></a>多对多模型</h4><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727079797238.png" alt="QQ_1727079797238"></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727079813666.png" alt="QQ_1727079813666"></p><h2 id="线程的状态与转换"><a href="#线程的状态与转换" class="headerlink" title="线程的状态与转换"></a>线程的状态与转换</h2><h3 id="线程的状态与转换-1"><a href="#线程的状态与转换-1" class="headerlink" title="线程的状态与转换"></a>线程的状态与转换</h3><p>基本上和进程是一样的：只需要关注这三个状态：</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727079913355.png" alt="QQ_1727079913355"></p><h3 id="组织与控制"><a href="#组织与控制" class="headerlink" title="组织与控制"></a>组织与控制</h3><p>与进程的组织与控制差不多：</p><p>控制进程的数据结构：进程控制块（PCB）</p><p>控制线程的数据结构：线程控制块（TCB）</p><p><img src="/2024/09/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/QQ_1727080222889.png" alt="QQ_1727080222889"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习环境配置</title>
    <link href="/2024/09/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/09/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装-Anaconda"><a href="#安装-Anaconda" class="headerlink" title="安装 Anaconda"></a>安装 Anaconda</h3><p>1）下载地址：<a href="https://www.anaconda.com/download/success">https://www.anaconda.com/download/success</a></p><p>2）Anaconda是python的一个开源发行版本，主要面向科学计算。我们可以理解为Anaconda是一个预装了很多我们用的到或用不到的第三方库的python。Anaconda里面增加了conda install命令，比pip install方便一些。</p><p>3）替换国内镜像源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 这里使用的VPN</span><br></code></pre></td></tr></table></figure><p>4）创建新的环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建一个名为 &quot;myenv&quot; 的新环境，并指定 Python 版本为 3.8：</span><br>conda create -n myenv python=3.8<br></code></pre></td></tr></table></figure><p>5）激活环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda activate myenv<br></code></pre></td></tr></table></figure><p>一些额外的小技巧：</p><ul><li>使用 conda list 查看当前环境中的所有已安装包。</li><li>使用 conda search <package_name> 搜索特定包。</package_name></li><li>使用 conda update -n <env_name> <package_name> 更新指定环境中的特定包。</package_name></env_name></li><li>使用 conda remove -n <env_name> <package_name> 从指定环境中删除特定包。</package_name></env_name></li><li>使用 conda env list 查看所有已创建的环境。</li><li>使用 conda env remove -n <env_name> 删除指定环境。</env_name></li></ul><p><strong>一些注意事项：</strong></p><ul><li>在使用 conda 创建环境时，建议在命令中添加 -y 选项，这样可以跳过所有确认提示。</li><li>每个环境都有自己的独立的库和依赖项，不会影响其他环境。</li><li>在不同的环境之间切换时，需要使用 conda activate 命令来激活相应的环境。</li><li>如果你遇到问题，可以使用 conda update -n base conda 来更新 conda 本身。</li></ul><h3 id="Jupyter"><a href="#Jupyter" class="headerlink" title="Jupyter"></a>Jupyter</h3><p>1）notebook可以直接在代码旁写出叙述性文档，而不是另外编写单独的文档。也就是他可以将代码，文档等一切集中到一处，让用户一目了然。</p><p>2）安装好以后可以使用jupyter notebook直接在本地运行一个服务，在浏览器访问即可。</p><h3 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h3><p>1）安装PyTorch，访问官网：<a href="https://pytorch.org/%EF%BC%8C%E6%89%BE%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84conda%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%A4%8D%E5%88%B6%E5%88%B0conda%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF%E3%80%82">https://pytorch.org/，找到对应的conda安装命令，复制到conda安装即可。</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda install pytorch::pytorch torchvision torchaudio -c pytorch<br></code></pre></td></tr></table></figure><p>安装好以后使用<code>conda list | grep torch</code>查看版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">(base) liangquan@liangquandeMacBook-Pro ~ % conda list | grep torch<br>pytorch                   2.4.0                  py3.12_0    pytorch<br>torchaudio                2.4.0                 py312_cpu    pytorch<br>torchvision               0.19.0                py312_cpu    pytorch<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网Part1-概述1</title>
    <link href="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/"/>
    <url>/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="计网Part1-概述1"><a href="#计网Part1-概述1" class="headerlink" title="计网Part1-概述1"></a>计网Part1-概述1</h1><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><h3 id="什么是计算机网络："><a href="#什么是计算机网络：" class="headerlink" title="什么是计算机网络："></a>什么是计算机网络：</h3><p>计算机网络（computer networking）是一个将众多分散的，自治的计算机系统，通过通信设备和线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。</p><p>自治的：其中一个终端坏掉不会影响其他终端</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>1）计算机网络（简称 网络）：由若干个节点（node）和连接这些节点的链路（Link）组成 </p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726965588393.png" alt="QQ_1726965588393"></p><p>由于接线器会产生冲突，比两一台计算机同时发消息就会出现冲突，导致两个都发不出去，所以集线器的效率低，现在不使用。</p><p>改换位交换机。</p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726965687458.png" alt="QQ_1726965687458"></p><p>交换机还可以连接交换机</p><p>以上连接的整体叫做；计算机网络，可以使用云朵表示：以下就是互连网：</p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726965767083.png" alt="QQ_1726965767083"></p><p>这里说的路由器和家用路由器有区别：</p><p>家用路由器 &#x3D; 路由器 + 交换机</p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726965932165.png" alt="QQ_1726965932165"></p><p>家庭网络 可以通过路由器 连接外部网络</p><p>就有了 互联网（Internet）</p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726966247666.png" alt="QQ_1726966247666"></p><p>互联网：TCP&#x2F;IP协议</p><p>互连网：任意协议</p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726966442319.png" alt="QQ_1726966442319"></p><p>ISP：（Internet Service Provider）互联网服务提供商。</p><h2 id="计算机网络的组成和功能"><a href="#计算机网络的组成和功能" class="headerlink" title="计算机网络的组成和功能"></a>计算机网络的组成和功能</h2><p>组成：</p><p>1）从组成部分看-硬件，软件，协议</p><p>2）从工作方式看-边缘部分，核心部分</p><p>3）从逻辑功能看-资源子网，通信子网</p><p>功能：</p><p>数据通信，资源共享，分布式处理，提高可靠性，负载均衡，其他。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>1）组成部分：</p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726967006296.png" alt="QQ_1726967006296" style="zoom:25%;"><p>2）工作方式：</p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726967054210.png" alt="QQ_1726967054210"></p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726967127563.png" alt="QQ_1726967127563"></p><p>交换服务：A-B：根据各种情况（网络负载）动态配置最优链路</p><p>3）逻辑功能</p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726967201098.png" alt="QQ_1726967201098"></p><p>资源子网：终端</p><p>终端中的负责通信的 硬件软件协议 看做通信子网的范畴。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726967351354.png" alt="QQ_1726967351354"></p><h2 id="电路交换，报文交换，分组交换"><a href="#电路交换，报文交换，分组交换" class="headerlink" title="电路交换，报文交换，分组交换"></a>电路交换，报文交换，分组交换</h2><p>三种数据交换技术：</p><ol><li>电路交换-》用于电话网络</li><li>报文交换-》用于电报网络</li><li>分组交换-》用于线代计算机网络</li></ol><p>1）电路交换的优缺点</p><p>优：</p><ul><li>通信前从主叫端到被叫端建议一条专用的物理线路，在通信的全部时间内，两用户始终占用端到端的线路资源。数据直达，传输效率高</li></ul><p>缺</p><ul><li>建立&#x2F;释放连接，需要额外的时间开销</li><li>线路被双方独占，利用率低</li><li>线路分配灵活性差</li><li>交换节点不支持 差错控制（无法发现传输过程中发生的数据错误）。</li></ul><p>So，电路交换技术适用于：低频次，大量的传输数据</p><p>2）电报（报文）网络的优缺点</p><p>报文交换机：可以接收报文，存储报文，转发报文</p><p>优</p><ul><li>通信前无需建立连接（收方和发送方）</li><li>数据以“报文”为单位被交换节点间“存储转发”，通信线路可以灵活分配。</li><li>两用户无需独占一条物理线路。相比于电路交换，线路利用率高。</li><li>节点之间指出“差错控制”（通过一些校验技术）</li></ul><p>缺</p><ul><li>报文是不定长的，不方便存储转发管理</li><li>长报文的存储转发时间开销大，缓存开销大。</li><li>长报文容易出错，重传代价高。</li></ul><p>3）分组交换：</p><p>用户数据拆分成不同的 分组，这些分组都包含了头信息，可能通过不同的网络线路到达终点，终点设备再重组这些分散的分组信息合并成用户数据。</p><p>路由器就是典型的分组交换机，路由器通过分组的IP地址判断发送位置。</p><p>优</p><ul><li>通信前无需建立连接（收方和发送方）</li><li>数据以“报文”为单位被交换节点间“存储转发”，通信线路可以灵活分配。</li><li>两用户无需独占一条物理线路。相比于电路交换，线路利用率高。</li><li>节点之间指出“差错控制”（通过一些校验技术）</li></ul><p>相比与报文交换，分组交换改进了一下问题：</p><ul><li>分组定长，方便存储和转发管理</li><li>分组的存储转发时间开销小，缓存开销小</li><li>分组不容易出错，重传代价低</li></ul><p>缺</p><ul><li>相比于报文交换，控制信息占比增加</li><li>相比于电路交换，依然存在存储转发时延</li><li>报文被拆分为多个分组，传输过程中可能出现失序，丢失等问题，增加处理的复杂度</li></ul><p>4）补充：虚电路交换技术</p><p>虚电路交换的过程：</p><p>1建立连接（虚拟电路）</p><p>2通信（分组按序，按已建立好的既定线路发送，通信双方不独占线路）</p><p>3释放连接</p><p>现代通信技术没有使用虚电路交换，原因在与我们的终端设备数据处理能力很强大，而虚电路交换是把，数据分组乱序等问题交给 核心网络 来处理，其实可以使用终端设备处理，降低核心设备负担。</p><h2 id="电路交换，报文交换，分组交换（性能分析）"><a href="#电路交换，报文交换，分组交换（性能分析）" class="headerlink" title="电路交换，报文交换，分组交换（性能分析）"></a>电路交换，报文交换，分组交换（性能分析）</h2><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726971784711.png" alt="QQ_1726971784711"></p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726971718984.png" alt="QQ_1726971718984"></p><p><img src="/2024/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B01/QQ_1726971759200.png" alt="QQ_1726971759200"></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章 排序</title>
    <link href="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC3%E7%AB%A0-%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC3%E7%AB%A0-%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="第-3-章-排序"><a href="#第-3-章-排序" class="headerlink" title="第 3 章  排序"></a>第 3 章  排序</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>你要在一个列表中找到播放量最高的歌，你需要遍历一遍这个列表，找出最高的，时间复杂度就是O(n)，但是如果你想对这个列表排序，就需要找n次最小(大)的</p><p><img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC3%E7%AB%A0-%E6%8E%92%E5%BA%8F/image-20240918144107907.png" alt="image-20240918144107907"></p><p>需要检查的元素数越来越少 </p><p>随着排序的进行，每次需要检查的元素数在逐渐减少，最后一次需要检查的元素都只有一个。既然如此，运行时间怎么还是<em>O</em>(<em>n</em>2 )呢？，这与大O表示法中的常数相关。数依次为<em>n</em>  1, <em>n</em> – 2, …, 2和1。平均每次检查的元素数为1&#x2F;2 × <em>n</em>，因此运行时间为<em>O</em>(<em>n</em> × 1&#x2F;2 × <em>n</em>)。但大O表示法省略诸如1&#x2F;2这样的常数，因此简单地写作<em>O</em>(<em>n</em> × <em>n</em>)或<em>O</em>(<em>n</em>2 )。</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p>先写一个找最小数的函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">findSmallest</span>(<span class="hljs-params">arr</span>):<br>  smallest = arr[<span class="hljs-number">0</span>]<br>  smallest_index = <span class="hljs-number">0</span> <br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr)): <br>    <span class="hljs-keyword">if</span> arr[i] &lt; smallest: <br>      smallest = arr[i] <br>      smallest_index = i <br>  <span class="hljs-keyword">return</span> smallest_index<br></code></pre></td></tr></table></figure><p>现在就可以编写排序算法了，找到一个最小的就删除掉一个。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">selectionSort</span>(<span class="hljs-params">arr</span>):<br>  newArr = [] <br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)): <br>    smallest = findSmallest(arr)<br>    newArr.append(arr.pop(smallest)) <br>  <span class="hljs-keyword">return</span> newArr<br></code></pre></td></tr></table></figure><h3 id="快速排序-1"><a href="#快速排序-1" class="headerlink" title="快速排序"></a>快速排序</h3><p>探索分而治之（divide and conquer，D&amp;C）一种注明的递归式问题解决方案。</p><h4 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h4><p>使用分而治之D&amp;C解决问题的过程包含两个步骤：</p><ol><li>找出极限条件，这种条件必须尽可能简单。</li><li>不断将问题分解（或者说缩小规模）直到符合基线条件。</li></ol><p><img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC3%E7%AB%A0-%E6%8E%92%E5%BA%8F/image-20240918151854033.png" alt="image-20240918151854033"></p><p>前面说“适用于这小块地的最大方块，也是适用于整块地的最大方块”，可以去了解一下 欧几里得算法</p><p>这里重申一下D&amp;C的工作原理：</p><p>(1) 找出简单的基线条件；</p><p>(2) 确定如何缩小问题的规模，使其符合基线条件。</p><p>D&amp;C并非可用于解决问题的算法，而是一种解决问题的思路。我们再来看一个例子。给定一个数字数组。</p><p>【2,4,6】</p><p>你需要把这些数字相加，返回结果，使用循环可以很容易完成这种任务。</p><p>但如何使用递归函数来实现呢？</p><p>第一步：找出基线条件。最简单的数组是什么样子的？不包含任何元素，只包含一个元素。这就是最简单的基线条件。</p><p>第二步：每次递归都不许离空数组更近一步，如何缩小问题的规模呢？计算列表中处理第一个数字以外的其他数字的总和，将其与第一个数字相加，再返回结果</p><p><img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC3%E7%AB%A0-%E6%8E%92%E5%BA%8F/image-20240918153201114.png" alt="image-20240918153201114"></p><p>编写涉及数组的递归函数时，基线条件通常是数组为空或只包含一个元素</p><h4 id="快速排序-2"><a href="#快速排序-2" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序是一种常用的排序算法，比起选择排序快很多，例如C语言标准库中的函数qsort实现的就是快速排序。快速排序也使用了D&amp;C。</p><p>下面来使用快速排序对数组进行排序，对于一个数组莱索，最简单的数组是什么样的呢？当然是没有元素和只有一个元素的呢。</p><p>所以快速排序的基线条件也是空或者只包含一个元素，这种情况下只需要原乡返回数组就行，压根不需要排序。</p><p>我们来看看更长的数组呢，对于一个包含两个元素的数组，进行排序也是很容易的。检查第一个元素是否比第二个元素大，如果比第二个元素大，就交换他们的位置</p><p>包含三个元素呢，使用D&amp;C，因此需要将数组分解，直到满足基线条件为止</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章-散列表</title>
    <link href="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC4%E7%AB%A0-%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    <url>/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC4%E7%AB%A0-%E6%95%A3%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h1><p>输入一个值，通过散列函数输出一个数，就像数组一样。</p><p>散列表（hash table）：在python中提供了散列表的实现：字典（dict）。</p><p>散列表是由键值对组成的，键Key不允许重复</p><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><p>大多数编程语言都提供了散列表的实现，不用考虑他们是怎么实现的，但你依然需要考虑性能，明白散列表的性能，就得先搞清楚什么是冲突：</p><p>比如有一个二十六位的数组，第一个位置存放a开头的，第二个位置存放b开头的</p><p>这样apple自然存放在一位置，banana自然存放在b，如果又来一个ayocados呢，也应该存放在一位置，就会覆盖掉apple，这样是不行的。</p><p>冲突产生了。为了避免，解决最简单的方式如：如果两个键映射到同一个位置，在这个位置上存储一个链表就行。</p><p>apple和avocado映射到了同一个位置</p><p><img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC4%E7%AB%A0-%E6%95%A3%E5%88%97%E8%A1%A8/image-20240921152811830.png" alt="image-20240921152811830"></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>散列表执行各种操作的时间都是O(1)，O(1)被称为常量时间，它并不意味着马上，而是说不管散列表多大，所需要的时间都是相同的。</p><p><img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC4%E7%AB%A0-%E6%95%A3%E5%88%97%E8%A1%A8/image-20240921153312385.png" alt="image-20240921153312385"></p><p>在最糟糕的情况下，散列表所有操作的运行时间都是O(n)：线性时间，这很慢，将散列表和数组链表比较一下：<img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC4%E7%AB%A0-%E6%95%A3%E5%88%97%E8%A1%A8/image-20240921153538795.png" alt="image-20240921153538795"></p><p>在平均情况下，散列表的查询（获取索引值）速度和数组一样快，而插入和删除速度和链表一样快，因此它兼得了两个的优点！</p><p>但在最糟糕的情况下，散列表的各种操作的速度都很慢。因此需要避免冲突：</p><ul><li>较低的填装因子（位置足够多）</li><li>良好的散列函数（避免出现链表）</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第5章-广度优先搜索</title>
    <link href="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC5%E7%AB%A0-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <url>/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC5%E7%AB%A0-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h1><p>广度优先搜索：找到两样东西之间的最短距离，不过最短距离的含义有很多</p><p> 编写国际跳棋AI，计算最少走多少步就可获胜；</p><p> 编写拼写检查器，计算最少编辑多少个地方就可将错拼的单词改成正确的单词，如：READED改为READER需要编辑一个地方；</p><p> 根据你的人际关系网络找到关系最近的医生。</p><p>解决最短路径问题的算法被称为广度优先搜索。需要两个步骤：</p><ol><li>使用图来建立问题模型。</li><li>使用广度优先搜索解决问题。</li></ol><h2 id="图是什么"><a href="#图是什么" class="headerlink" title="图是什么"></a>图是什么</h2><p>图由接地那和边组成。一个节点可能与众多节点直接相连，这些节点被称为邻居</p><p><img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC5%E7%AB%A0-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/image-20240921160147672.png" alt="image-20240921160147672"></p><p><img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC5%E7%AB%A0-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/image-20240921160158765.png" alt="image-20240921160158765"></p><h2 id="广度优先搜索-1"><a href="#广度优先搜索-1" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>前面我们学习过二分查找。广度优先搜索时一种用图的查找算法，可以帮我我们回答两类问题：</p><ol><li>从A节点出发，能否到达B节点</li><li>从A节点出发，到达B节点最短路径是什么？</li></ol><h3 id="查找最短路径"><a href="#查找最短路径" class="headerlink" title="查找最短路径"></a>查找最短路径</h3><h3 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列 (queue)"></a>队列 (queue)</h3><p>队列是一种先进先出（First In First Out，FIFO）的数据结构，而栈是一种后进先出（Last In First Out，LIFO）的数据结构。</p><h2 id="实现图"><a href="#实现图" class="headerlink" title="实现图"></a>实现图</h2><p>首先，需要使用代码来实现图。图由多个节点组成。</p><p><img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC5%E7%AB%A0-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/image-20240921161523751.png" alt="image-20240921161523751"></p><h2 id="实现算法"><a href="#实现算法" class="headerlink" title="实现算法"></a>实现算法</h2><p><img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC5%E7%AB%A0-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/image-20240921161733626.png" alt="image-20240921161733626"></p><ul><li>更新队列时，我使用术语“入队”和“出队”，但你也可能遇到术语“压入”和“弹出”。压入大致相当于入队，而弹出大致相当于出队。</li></ul><p>检查一个人之前，要确认之前没检查过他，这很重要。为此，你可使用一个</p><p>列表来记录检查过的人。</p><p>考虑到这一点后，广度优先搜索的最终代码如下。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">name</span>): <br>  search_queue = deque() <br>  search_queue += graph[name] <br>  searched = [] <br>  <span class="hljs-keyword">while</span> search_queue: <br>    person = search_queue.popleft() <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> person <span class="hljs-keyword">in</span> searched:<br>      <span class="hljs-keyword">if</span> person_is_seller(person): <br>        <span class="hljs-built_in">print</span> person + <span class="hljs-string">&quot; is a mango seller!&quot;</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <br>      <span class="hljs-keyword">else</span>: <br>        search_queue += graph[person] <br>        searched.append(person)<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC5%E7%AB%A0-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/image-20240921162500471.png" alt="image-20240921162500471"></p><h4 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h4><p>如果你在你的整个人际关系网中搜索芒果销售商，就意味着你将沿每条边前行（记住，边是从一个人到另一个人的箭头或连接），因此运行时间至少为<em>O</em>(边数)。</p><p>你还使用了一个队列，其中包含要检查的每个人。将一个人添加到队列需要的时间是固定的，即为<em>O</em>(1)，因此对每个人都这样做需要的总时间为<em>O</em>(人数)。所以，广度优先搜索的运行时间为<em>O</em>(人数 + 边数)，这通常写作<em>O</em>(<em>V</em> + <em>E</em>)，其中<em>V</em>为顶点（vertice）数，<em>E</em>为边数。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>广度优先搜索指出是否有A到B的路径</p></li><li><p>如果有，广度优先搜索将找出最端路径</p></li><li><p>面临类似于寻找最短路径的问题时，可以尝试使用图来建立模型，再使用广度优先搜索来及解决问题。</p></li><li><p>有向图中的边为箭头，箭头的方向指定了关系的方向，例如，rama→adit表示rama欠adit钱。</p></li><li><p>无向图中的边不带箭头，其中的关系是双向的，例如，ross - rachel表示“ross与rachel约</p><p>会，而rachel也与ross约会”。</p></li><li><p>队列是先进先出（FIFO）的</p></li><li><p>栈是后进先出（LIFO）的。</p></li><li><p>你需要按加入顺序检查搜索列表中的人，否则找到的就不是最短路径，因此搜索列表必须是队列。</p></li><li><p>对于检查过的人，务必不要再去检查，否则可能导致无限循环。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>张量</title>
    <link href="/2024/09/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%BC%A0%E9%87%8F/"/>
    <url>/2024/09/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%BC%A0%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><p>在深度学习中，我们通常会频繁的去对数据进行操作。</p><h3 id="创建Tensor（张量）"><a href="#创建Tensor（张量）" class="headerlink" title="创建Tensor（张量）"></a>创建Tensor（张量）</h3><p>1）先介绍一下Tensor的最基本的功能，即Tensor的创建。</p><p>首先就是导入PyTorch：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个5x3的未初始化的 Tensor</span><br>x = torch.empty(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[0., 0., 0.],        [0., 0., 0.],        [0., 0., 0.],        [0., 0., 0.],        [0., 0., 0.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个5x3的随机初始化的Tensor</span><br>x = torch.rand(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[0.7852, 0.0743, 0.0271],        [0.6014, 0.5902, 0.8844],        [0.0410, 0.6901, 0.8871],        [0.0437, 0.0626, 0.5687],        [0.9419, 0.7970, 0.9925]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个5x3的long型全0的Tensor</span><br>x = torch.zeros(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, dtype = torch.long)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 还可以直接根据数据来创建</span><br>x = torch.tensor([<span class="hljs-number">4.5</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([4.5000, 3.0000])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 还可以通过现有的Tensor来创建，此方法会默认重用输入Tensor的一些属性，</span><br><span class="hljs-comment"># 例如 数据类型，除非自定义数据类型</span><br>x = x.new_ones(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, dtype = torch.float64)<br><span class="hljs-built_in">print</span>(x)<br><br>x = torch.randn_like(x, dtype = torch.<span class="hljs-built_in">float</span>)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[1., 1., 1.],        [1., 1., 1.],        [1., 1., 1.],        [1., 1., 1.],        [1., 1., 1.]], dtype=torch.float64)tensor([[ 0.5578, -0.0502,  2.0930],        [-0.9528, -0.6031, -0.0405],        [ 0.1853, -0.7159, -1.0291],        [ 1.0159, -0.3431, -0.3712],        [-0.1306,  0.7387, -0.6336]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 我们还可以通过 shape 或者size() 来获取Tensor的形状</span><br><span class="hljs-built_in">print</span>(x.size())<br><span class="hljs-built_in">print</span>(x.shape)<br><span class="hljs-comment"># 注意：返回的torch.Size其实就是一个tuple（元组）, 支持所有tuple的操作</span><br><span class="hljs-comment"># 在 Python 中，tuple（元组）是一种不可变的序列数据类型。</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">torch.Size([5, 3])torch.Size([5, 3])</code></pre><p>还有很多函数可以创建<code>Tensor</code>，去翻翻官方API就知道了，下表给了一些常用的作参考。</p><table><thead><tr><th>函数</th><th align="left">功能</th></tr></thead><tbody><tr><td>Tensor(*sizes)</td><td align="left">基础构造函数</td></tr><tr><td>tensor(data,)</td><td align="left">类似np.array的构造函数</td></tr><tr><td>ones(*sizes)</td><td align="left">全1Tensor</td></tr><tr><td>zeros(*sizes)</td><td align="left">全0Tensor</td></tr><tr><td>eye(*sizes)</td><td align="left">对角线为1，其他为0</td></tr><tr><td>arange(s,e,step)</td><td align="left">从s到e，步长为step</td></tr><tr><td>linspace(s,e,steps)</td><td align="left">从s到e，均匀切分成steps份</td></tr><tr><td>rand&#x2F;randn(*sizes)</td><td align="left">均匀&#x2F;标准分布</td></tr><tr><td>normal(mean,std)&#x2F;uniform(from,to)</td><td align="left">正态分布&#x2F;均匀分布</td></tr><tr><td>randperm(m)</td><td align="left">随机排列</td></tr></tbody></table><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>这里学习Tensor的各种操作</p><h4 id="算术操作"><a href="#算术操作" class="headerlink" title="算术操作"></a>算术操作</h4><p>在PyTorch中，同一种操作可能有很多形式，下面使用加法作为例子。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">y = torch.rand(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><ul><li>加法形式1</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(x + y)<br></code></pre></td></tr></table></figure><ul><li>加法形式2</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(torch.add(x, y))<br></code></pre></td></tr></table></figure><ul><li>加法形式3</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">result = torch.empty(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<br>torch.add(x, y, out = result)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><ul><li>加法形式4</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">y.add_(x)<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>1）我们还可以使用类似NumPy的索引来操作访问Tensor的一部分，需要注意的是：索引出来的结果与元数据共享内存，也即修改一个，另一个也会跟着改变。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">y = x[<span class="hljs-number">0</span>, :]<br>y += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(x[<span class="hljs-number">0</span>, :])<br></code></pre></td></tr></table></figure><p>2）处理常用的索引选择数据之外，PyTorch还提供了一些高级的选择函数：</p><table><thead><tr><th align="left">函数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">index_select(input, dim, index)</td><td align="left">在指定维度dim上选取，比如选取某些行、某些列</td></tr><tr><td align="left">masked_select(input, mask)</td><td align="left">例子如上，a[a&gt;0]，使用ByteTensor进行选取</td></tr><tr><td align="left">nonzero(input)</td><td align="left">非0元素的下标</td></tr><tr><td align="left">gather(input, dim, index)</td><td align="left">根据index，在dim维度上选取数据，输出的size与index一样</td></tr></tbody></table><p>这里不详细介绍，用到了再查官方文档。</p><h4 id="改变形状"><a href="#改变形状" class="headerlink" title="改变形状"></a>改变形状</h4><p>用view()来改变Tensor的形状</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">y = x.view(<span class="hljs-number">15</span>)<br>z = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)  <span class="hljs-comment"># -1所指的维度可以根据其他维度的值推出来</span><br><span class="hljs-built_in">print</span>(x.size(), y.size(), z.size())<br></code></pre></td></tr></table></figure><p>注意view()，返回的新的Tensor与源Tensor虽然可能有些不同的size，但是是共享data的，也就是说，改变其中一个，另一个也会跟着改变。**(顾名思义，view仅仅是改变了对这个张量的观察角度，内部数据并未改变)**</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">x += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y) <span class="hljs-comment"># 也加了1</span><br></code></pre></td></tr></table></figure><p>所以如果我们想返回一个真正新的副本（即不共享data内存）该怎么办呢？Pytorch还提供了一个<code>reshape()</code>可以改变形状，但是此函数并不能保证返回的是其拷贝，所以不推荐使用。推荐先用<code>clone</code>创造一个副本然后再使用<code>view</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">x_cp = x.clone().view(<span class="hljs-number">15</span>)<br>x -= <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(x_cp)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 基础知识</title>
    <link href="/2024/09/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/py%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/09/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/py%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p><img src="/2024/09/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/py%E5%9F%BA%E7%A1%80/img1.png" alt="alt text"></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="运算和循环"><a href="#运算和循环" class="headerlink" title="运算和循环"></a>运算和循环</h3><p>1）这里使用：莫烦python学习：<a href="https://mofanpy.com/tutorials/python-basic/interactive-python/">https://mofanpy.com/tutorials/python-basic/interactive-python/</a></p><p>2）运算</p><table><thead><tr><th align="left">+</th><th>加</th><th>3+4&#x3D;7</th></tr></thead><tbody><tr><td align="left">-</td><td>减</td><td>3-4&#x3D;-1</td></tr><tr><td align="left">*</td><td>乘</td><td>3*4&#x3D;12</td></tr><tr><td align="left">&#x2F;</td><td>除</td><td>3&#x2F;2&#x3D;1.5</td></tr><tr><td align="left">%</td><td>取模</td><td>103%100&#x3D;3</td></tr><tr><td align="left">**</td><td>幂</td><td>3**2&#x3D;9</td></tr><tr><td align="left">&#x2F;&#x2F;</td><td>取整除</td><td>10&#x2F;&#x2F;3&#x3D;3</td></tr></tbody></table><p>3）条件判断</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">today = <span class="hljs-number">4</span><br><span class="hljs-keyword">if</span> today == <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;周一&quot;</span>)<br><span class="hljs-keyword">elif</span> today == <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;周二&quot;</span>)<br><span class="hljs-keyword">elif</span> today == <span class="hljs-number">3</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;周三&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;周一周二周三之外的一天&quot;</span>)<br></code></pre></td></tr></table></figure><p>4）for和while循环</p><table><thead><tr><th>for</th><th>天然适合在有限的循环中</th></tr></thead><tbody><tr><td>while</td><td>可以被用在无限循环中</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># range(3, 10, 2) 表示3开始，到10之前，每2次出一次数。</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;新文件-&quot;</span> + <span class="hljs-built_in">str</span>(i))<br></code></pre></td></tr></table></figure><table><thead><tr><th>break</th><th>紧急弹出</th></tr></thead><tbody><tr><td>continue</td><td>算了，我接着来</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">count = <span class="hljs-number">0</span><br>guess_num = <span class="hljs-number">10</span><br><span class="hljs-keyword">while</span> guess_num != <span class="hljs-number">20</span>:<br>    guess_num += <span class="hljs-number">1</span><br>    count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(guess_num)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span>    <span class="hljs-comment"># 跳过偶数</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>list列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">files = [<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;f2.txt&quot;</span>, <span class="hljs-string">&quot;f3.txt&quot;</span>, <span class="hljs-string">&quot;f4.txt&quot;</span>, <span class="hljs-string">&quot;f5.txt&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;files[0] &quot;</span>, files[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;files[3] &quot;</span>, files[<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;files[-1] &quot;</span>, files[-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;files[-3] &quot;</span>, files[-<span class="hljs-number">3</span>])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;files[:3] &quot;</span>, files[:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;files[2:4] &quot;</span>, files[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;files[-3:] &quot;</span>, files[-<span class="hljs-number">3</span>:])<br></code></pre></td></tr></table></figure><p><strong>在列表中，你可以存放不同类型的元素，字符，数字，甚至列表里还能有列表。</strong> 所以这个抽屉还挺万能的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">l = [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;file&quot;</span>, [<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">3.2</span>]]<br><span class="hljs-built_in">print</span>(l)<br>l[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;new string&quot;</span><br><span class="hljs-built_in">print</span>(l)<br></code></pre></td></tr></table></figure></li><li><p>Dict 字典</p><ul><li>可以理解为List是抽屉，Dict是为抽屉贴标签，后续找东西就可以根据标签找。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">files = &#123;<span class="hljs-string">&quot;ID&quot;</span>: <span class="hljs-number">111</span>, <span class="hljs-string">&quot;passport&quot;</span>: <span class="hljs-string">&quot;my passport&quot;</span>, <span class="hljs-string">&quot;books&quot;</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]&#125;<br><span class="hljs-built_in">print</span>(files)<br><span class="hljs-built_in">print</span>(files[<span class="hljs-string">&quot;books&quot;</span>])<br><br>files[<span class="hljs-string">&quot;ID&quot;</span>] = <span class="hljs-number">222</span><br><span class="hljs-built_in">print</span>(files)<br></code></pre></td></tr></table></figure></li><li><p>Tuple 元组</p><ul><li>元组有它一个唯一的独特性，就是它里面的东西不可变，定下来就定下来了，不让你变。</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">files = (<span class="hljs-string">&quot;file1&quot;</span>, <span class="hljs-string">&quot;file2&quot;</span>, <span class="hljs-string">&quot;file3&quot;</span>)<br><span class="hljs-built_in">print</span>(files[<span class="hljs-number">1</span>])<br>files[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;file4&quot;</span>   <span class="hljs-comment"># 这里会报错</span><br></code></pre></td></tr></table></figure><ul><li>set 合集<ul><li>set 里面只会存在非重复的元素</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py">my_files = <span class="hljs-built_in">set</span>([<span class="hljs-string">&quot;file1&quot;</span>, <span class="hljs-string">&quot;file2&quot;</span>, <span class="hljs-string">&quot;file3&quot;</span>])<br><span class="hljs-built_in">print</span>(my_files)<br>my_files.add(<span class="hljs-string">&quot;file3&quot;</span>)<br><span class="hljs-built_in">print</span>(my_files)<br>my_files.add(<span class="hljs-string">&quot;file4&quot;</span>)<br><span class="hljs-built_in">print</span>(my_files)<br>my_files.remove(<span class="hljs-string">&quot;file3&quot;</span>)<br><span class="hljs-built_in">print</span>(my_files)<br><br><span class="hljs-comment"># &#123;&#x27;file1&#x27;, &#x27;file2&#x27;, &#x27;file3&#x27;&#125;</span><br><span class="hljs-comment"># &#123;&#x27;file1&#x27;, &#x27;file2&#x27;, &#x27;file3&#x27;&#125;</span><br><span class="hljs-comment"># &#123;&#x27;file4&#x27;, &#x27;file1&#x27;, &#x27;file2&#x27;, &#x27;file3&#x27;&#125;</span><br><span class="hljs-comment"># &#123;&#x27;file4&#x27;, &#x27;file1&#x27;, &#x27;file2&#x27;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my_files&quot;</span>, my_files)<br>your_files = &#123;<span class="hljs-string">&quot;file1&quot;</span>, <span class="hljs-string">&quot;file3&quot;</span>, <span class="hljs-string">&quot;file5&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;your_files&quot;</span>, your_files)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;交集 &quot;</span>, your_files.intersection(my_files))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;并集 &quot;</span>, your_files.union(my_files))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;补集 &quot;</span>, your_files.difference(my_files))<br></code></pre></td></tr></table></figure><p>6）在循环中使用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># List</span><br>files = [<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;f2.txt&quot;</span>, <span class="hljs-string">&quot;f3.txt&quot;</span>, <span class="hljs-string">&quot;f4.txt&quot;</span>, <span class="hljs-string">&quot;f5.txt&quot;</span>]<br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files:<br>    <span class="hljs-keyword">if</span> f == <span class="hljs-string">&quot;f3.txt&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I got f3.txt&quot;</span>)<br><br><span class="hljs-comment"># Dict 字典</span><br>files = &#123;<span class="hljs-string">&quot;ID&quot;</span>: <span class="hljs-number">111</span>, <span class="hljs-string">&quot;passport&quot;</span>: <span class="hljs-string">&quot;my passport&quot;</span>, <span class="hljs-string">&quot;books&quot;</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]&#125;<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> files.keys():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key:&quot;</span>, key)<br><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> files.values():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;value:&quot;</span>, value)<br><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> files.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key:&quot;</span>, key, <span class="hljs-string">&quot;, value:&quot;</span>, value)<br></code></pre></td></tr></table></figure><p>7）自带功能</p><ul><li><p>往列表里面添加和pop值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py">files = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    files.append(<span class="hljs-string">&quot;f&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;.txt&quot;</span>) <span class="hljs-comment"># 添加</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;has&quot;</span>, files)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(files)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop&quot;</span>, files.pop())   <span class="hljs-comment"># 从最后一个开始 pop 出</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;remain&quot;</span>, files)<br><br><span class="hljs-comment"># 输出：</span><br>has [<span class="hljs-string">&#x27;f0.txt&#x27;</span>]<br>has [<span class="hljs-string">&#x27;f0.txt&#x27;</span>, <span class="hljs-string">&#x27;f1.txt&#x27;</span>]<br>has [<span class="hljs-string">&#x27;f0.txt&#x27;</span>, <span class="hljs-string">&#x27;f1.txt&#x27;</span>, <span class="hljs-string">&#x27;f2.txt&#x27;</span>]<br>has [<span class="hljs-string">&#x27;f0.txt&#x27;</span>, <span class="hljs-string">&#x27;f1.txt&#x27;</span>, <span class="hljs-string">&#x27;f2.txt&#x27;</span>, <span class="hljs-string">&#x27;f3.txt&#x27;</span>]<br>has [<span class="hljs-string">&#x27;f0.txt&#x27;</span>, <span class="hljs-string">&#x27;f1.txt&#x27;</span>, <span class="hljs-string">&#x27;f2.txt&#x27;</span>, <span class="hljs-string">&#x27;f3.txt&#x27;</span>, <span class="hljs-string">&#x27;f4.txt&#x27;</span>]<br>pop f4.txt<br>remain [<span class="hljs-string">&#x27;f0.txt&#x27;</span>, <span class="hljs-string">&#x27;f1.txt&#x27;</span>, <span class="hljs-string">&#x27;f2.txt&#x27;</span>, <span class="hljs-string">&#x27;f3.txt&#x27;</span>]<br>pop f3.txt<br>remain [<span class="hljs-string">&#x27;f0.txt&#x27;</span>, <span class="hljs-string">&#x27;f1.txt&#x27;</span>, <span class="hljs-string">&#x27;f2.txt&#x27;</span>]<br>pop f2.txt<br>remain [<span class="hljs-string">&#x27;f0.txt&#x27;</span>, <span class="hljs-string">&#x27;f1.txt&#x27;</span>]<br>pop f1.txt<br>remain [<span class="hljs-string">&#x27;f0.txt&#x27;</span>]<br>pop f0.txt<br>remain []<br></code></pre></td></tr></table></figure><p>常用的功能函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><br>files = [<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;f2.txt&quot;</span>]<br><br><span class="hljs-comment"># 扩充入另一个列表</span><br>files.extend([<span class="hljs-string">&quot;f3.txt&quot;</span>, <span class="hljs-string">&quot;f4.txt&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;extend&quot;</span>, files)<br><br><span class="hljs-comment"># 按位置添加</span><br>files.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;file5.txt&quot;</span>)     <span class="hljs-comment"># 添加入第1位（首位是0哦）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;insert&quot;</span>, files)<br><br><span class="hljs-comment"># 移除某索引</span><br><span class="hljs-keyword">del</span> files[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;del&quot;</span>, files)<br><br><span class="hljs-comment"># 移除某值 </span><br>files.remove(<span class="hljs-string">&quot;f3.txt&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;remove&quot;</span>, files)<br><br></code></pre></td></tr></table></figure><p>字典也是，也有额外的一些常用功能，比如<code>get()</code>, <code>update()</code>等，我下面在补充一下。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py">files = &#123;<span class="hljs-string">&quot;ID&quot;</span>: <span class="hljs-number">111</span>, <span class="hljs-string">&quot;passport&quot;</span>: <span class="hljs-string">&quot;my passport&quot;</span>, <span class="hljs-string">&quot;books&quot;</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]&#125;<br><br><span class="hljs-comment"># 按key拿取，并在拿取失败的时候给一个设定好的默认值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;files[&quot;ID&quot;]:&#x27;</span>, files[<span class="hljs-string">&quot;ID&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;files.get(&quot;ID&quot;):&#x27;</span>, files.get(<span class="hljs-string">&quot;unknown ID&quot;</span>, <span class="hljs-string">&quot;不存在这个 ID&quot;</span>))<br><br><span class="hljs-comment"># 将另一个字典补充到当前字典</span><br>files.update(&#123;<span class="hljs-string">&quot;files&quot;</span>: [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>]&#125;)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;update:&#x27;</span>, files)<br><br><span class="hljs-comment"># pop 调一个item，和列表的 pop 类似</span><br>popped = files.pop(<span class="hljs-string">&quot;ID&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;popped:&#x27;</span>, popped)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;remain:&quot;</span>, files)<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="Function-函数"><a href="#Function-函数" class="headerlink" title="Function 函数"></a>Function 函数</h3><p>1）定义函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>  <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>2）参数列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x, a, b, c</span>):<br>    <span class="hljs-keyword">return</span> a*x**<span class="hljs-number">2</span> + b*x + c*<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>))    <span class="hljs-comment"># 忽略参数名，按顺序传参</span><br><span class="hljs-built_in">print</span>(f(x=<span class="hljs-number">2</span>, a=<span class="hljs-number">1</span>, b=<span class="hljs-number">1</span>, c=<span class="hljs-number">0</span>)) <span class="hljs-comment"># 写上参数名，按名字传参</span><br><span class="hljs-built_in">print</span>(f(a=<span class="hljs-number">1</span>, c=<span class="hljs-number">0</span>, x=<span class="hljs-number">2</span>, b=<span class="hljs-number">1</span>)) <span class="hljs-comment"># 若用参数名，可以打乱顺序传</span><br><br><span class="hljs-comment"># 默认值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x, a=<span class="hljs-number">1</span>, b=<span class="hljs-number">1</span>, c=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">return</span> a*x**<span class="hljs-number">2</span> + b*x + c*<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">2</span>, a=<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>3）全局和局部变量</p><table><thead><tr><th align="left">变量</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">全局 global</td><td align="left">函数里外都能用 （公用）</td></tr><tr><td align="left">局部 local</td><td align="left">仅在函数内有用 （私有）</td></tr></tbody></table><p>这里注意</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">filename = <span class="hljs-string">&quot;f1.txt&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify_name</span>():<br>    filename = <span class="hljs-string">&quot;f2.txt&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;local filename:&quot;</span>, filename)<br>modify_name()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;global filename:&quot;</span>, filename)  <br><br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># local filename: f2.txt</span><br><span class="hljs-comment"># global filename: f1.txt</span><br></code></pre></td></tr></table></figure><p>问题：为什么我在 <code>modify_name()</code> 里面修改了 <code>filename</code>，而且在里面打印出来时，它的确也被修改了， 但是在外面打印 <code>filename</code> 的时候却没有变化？</p><p>答：因为自私的 <code>modify_name()</code> 想自己在内部搞一套标准， 你外面有啥不要紧，如果我自己也搞一个一样的东西，那我就觉得自己这个更重要，就不看外面的东西了。所以local的<code>filename</code>就是 <code>modify_name()</code> 自己那一套。</p><p>如果需要改变呢：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">filename = <span class="hljs-string">&quot;f1.txt&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify_name</span>():<br>    <span class="hljs-keyword">global</span> filename  <span class="hljs-comment"># 提出申请</span><br>    filename = <span class="hljs-string">&quot;f2.txt&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;local filename:&quot;</span>, filename)<br>modify_name()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;global filename:&quot;</span>, filename)  <br><br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># local filename: f2.txt</span><br><span class="hljs-comment"># global filename: f2.txt</span><br></code></pre></td></tr></table></figure><p>modify_name()<code>必须先向外面打一个申请报告，向外面申请自己要去修改公用的</code>filename&#96;。 </p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>1）定义class</p><p>用 <code>class File</code> 来创建一个大概念（类），<strong>注意我们通常约定类的名字要首字母大写</strong>。 然后用 <code>my_file = File()</code> 来创建一个具体的文件。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.name = <span class="hljs-string">&quot;f1&quot;</span><br>        <span class="hljs-variable language_">self</span>.create_time = <span class="hljs-string">&quot;today&quot;</span><br><br>my_file = File()<br><span class="hljs-built_in">print</span>(my_file.name)<br><span class="hljs-built_in">print</span>(my_file.create_time)<br></code></pre></td></tr></table></figure><p><code>self</code> 是作为类自己的一个索引，不管你在定义类的时候，想要获取这个类的什么属性或功能，都可以通过 <code>self</code> 来获取。 比如这个 <code>File</code> 类中，获取类自己的 <code>create_time</code>，就写成了 <code>self.create_time</code>。</p><p><code>__init__</code>每当你进行一次 <code>my_file = File()</code> 这种操作的时候，把类给实例化的时候， <code>File</code> 类都会触发一次 <code>__init__</code> 功能，所以这是一个功能，用于初始化一些设置。</p><p>2）class的功能</p><p>初始化 <code>File()</code> 的时候传入你要 <code>__init__</code> 的参数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, create_time=<span class="hljs-string">&quot;today&quot;</span></span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.create_time = create_time<br><br>my_file = File(<span class="hljs-string">&quot;my_file&quot;</span>)<br><span class="hljs-built_in">print</span>(my_file.name)<br><span class="hljs-built_in">print</span>(my_file.create_time)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea配置模板语法</title>
    <link href="/2024/09/01/%E5%85%B6%E4%BB%96/idea%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/09/01/%E5%85%B6%E4%BB%96/idea%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="idea配置模板语法"><a href="#idea配置模板语法" class="headerlink" title="idea配置模板语法"></a>idea配置模板语法</h1><ol><li><p>打开idea，进入设置，搜索Live Templates</p></li><li><p>点击右侧的+号，选择Template Group，创建一个自己的分组</p></li><li><p>再次点击右侧的+号，选择Live Template</p></li><li><p>在Abbreviation中输入模板的缩写，在Template text中输入模板的内容，点击Apply，点击OK</p></li></ol><p>实例模板内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;$ID$&quot;&gt;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>$END$<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>#$ID$ &#123;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>注意：$ID$是模板的占位符，在输入模板缩写后，按Tab键，占位符会被自动替换为光标所在的位置<br>在Edit Variables中，点击+号，$ID$的Expression中输入camelCase(fileNameWithoutExtension())，点击Apply，点击OK<br><img src="/2024/09/01/%E5%85%B6%E4%BB%96/idea%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/img1.png" alt="idea截图"></p><ol start="5"><li>新建一个vue文件，在文件里面输入模板的缩写，然后按Tab键，模板的内容就会自动补全<br><img src="/2024/09/01/%E5%85%B6%E4%BB%96/idea%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/img2.png" alt="alt text"></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网Part1-概述2</title>
    <link href="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/"/>
    <url>/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="计网Part1-概述2"><a href="#计网Part1-概述2" class="headerlink" title="计网Part1-概述2"></a>计网Part1-概述2</h1><h2 id="计算机网络分类"><a href="#计算机网络分类" class="headerlink" title="计算机网络分类"></a>计算机网络分类</h2><p>1）（☆）按分布范围分类-》广域网，城域网，局域网，个域网</p><p>2）按传输技术分类-》广播式网络，点对点网络</p><p>3）（☆）按拓扑结构分类-》总线型，环形，星形，网状</p><p>4）按使用者分类-》公共网，专用网</p><p>按传输介质分类-》有线网络，无线网络</p><h4 id="分布范围分类"><a href="#分布范围分类" class="headerlink" title="分布范围分类"></a>分布范围分类</h4><ul><li><p>广域网（WAN）：几十~几千公里</p></li><li><p>城域网（MAN）：几千米~几十千米</p><ul><li>与局域网类似，不单独讨论。</li></ul></li><li><p>局域网（LAN）：几十米~几千米</p><ul><li>通信技术：以太网，连接局域网的交换机也叫做以太网交换机。</li></ul></li><li><p>个域网（PAN）：几米~几十米</p><ul><li>通过无线技术将个人设备连接起来的技术，比如蓝牙，zigbee，智能网关（家居）等</li></ul></li></ul><h4 id="按传输技术分类："><a href="#按传输技术分类：" class="headerlink" title="按传输技术分类："></a>按传输技术分类：</h4><ul><li><p>广播试网络（群里@某人）</p><ul><li>当一台计算机发送数据分组时，广播范围为所有计算机，并通过检查分组目的地址来决定是否接受分组。</li></ul></li><li><p>点对点网络（一对一私信）</p><ul><li>数据只会从发送方“点对点”发送到接收方，精准送达。</li></ul></li></ul><h4 id="按拓扑结构分类："><a href="#按拓扑结构分类：" class="headerlink" title="按拓扑结构分类："></a>按拓扑结构分类：</h4><ul><li>总线型结构（广播式传输）<ul><li>存在“总线争用”问题</li><li>典型代表：集线器连接的设备，物理上是星形拓扑，逻辑上是总线型（广播到其他）</li></ul></li><li>环形结构（广播式）<ul><li>令牌环网，只有有令牌（Token）的计算机才能发数据，Token是传递的，用完给下一个，解决了”总线争用“</li></ul></li><li>星形结构<ul><li>由中央设备（交换机）实现点对点传输</li><li>不存在”总线争用“</li></ul></li><li>网状结构（常用于广域网）<ul><li>由众多路由器连接的结构</li></ul></li></ul><h4 id="按使用者分类"><a href="#按使用者分类" class="headerlink" title="按使用者分类"></a>按使用者分类</h4><ul><li>公用网（给钱就能用）</li><li>专用网（给钱也不行）</li></ul><h4 id="按传输介质分类"><a href="#按传输介质分类" class="headerlink" title="按传输介质分类"></a>按传输介质分类</h4><ul><li>有线网</li><li>无线网</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726973821010.png" alt="QQ_1726973821010" style="zoom:67%;"><h2 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h2><p>七个性能指标</p><ol><li>速率</li><li>带宽</li><li>吞吐量</li><li>时延</li><li>时延带宽积</li><li>往返时延</li><li>信道利用率</li></ol><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>信道（Channel）（信道 !&#x3D; 通信线路）：表示向某一方向传送信息的通道，一条通信线路在逻辑上往往对应一条发送行道和一条接收信道</p><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726974349910.png" alt="QQ_1726974349910"></p><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726974384944.png" alt="QQ_1726974384944"></p><p>速率（Speed）：指连接到网络上的节点在信道上传输数据的速率。也称为数据率或比特率，数据传输速率。</p><p>速率单位：bit&#x2F;s，b&#x2F;s，bps</p><p>PS：注意：有时也会出现 B&#x2F;s (这里的B&#x3D;Byte 字节，b&#x3D;bit 比特，1B&#x3D;8b)，一大B等于8小b</p><p>计算机网络中常见的数量前缀：</p><p>K(千10^3)-&gt;M(兆10^6)-&gt;G(吉10^9)-&gt;T(太10^12)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">120kbps = 120 * 10^3 bps<br>1.3Mbps = 1.3 * 10^6 bps<br><br>1.8MB/s = 1.8 * 10^6 *8 bps<br>10KB/s = 10 * 10^3 * 8 bps<br><br>如果当前网速：80Mbps<br>80Mbps <br>= 80 * 10^6 bps <br>= (80 * 10^6)/ 10^3/ 8 <br>=  10 * 10^3 KB/s<br>= 10 MB/s<br><br>就是10MB/s<br><br>1Mbps=1000kbps=1000/8kB/s=125kB/s<br></code></pre></td></tr></table></figure><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726975902747.png" alt="QQ_1726975902747"></p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>带宽（bandwidth）：某信道所能传送的最高数据率。</p><p>比如：上行30Mbps，下行1000Mbps</p><p>上行行道：最高数据传输率 &#x3D; 30Mbps，即上行带宽 &#x3D; 30Mbps &#x3D; 4MB&#x2F;s</p><p>下行信道：最高数据传输率 &#x3D; 1000Mbps，即下行带宽 &#x3D; 1000Mbps &#x3D; 125MB&#x2F;s</p><p>例题1：</p><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726976292563.png" alt="QQ_1726976292563"></p><p>答案1：B</p><p>结论：节点之间通信实际能达到的最高速率，有带宽，节点性能共同限制。</p><p>带宽的不同含义：</p><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726981927764.png" alt="QQ_1726981927764"></p><h4 id="吞吐量："><a href="#吞吐量：" class="headerlink" title="吞吐量："></a>吞吐量：</h4><p>吞吐量（Throughput）：指单位时间内通过某个网络（或信道，接口）的 实际数据量。吞吐量受带宽限制，受复杂的网络负载情况影响。</p><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726982162233.png" alt="QQ_1726982162233"></p><h4 id="主要考点"><a href="#主要考点" class="headerlink" title="主要考点"></a>主要考点</h4><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726982188231.png" alt="QQ_1726982188231"></p><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>时延（Delay）：指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传输到另一端需要的时间。有时也称为延迟和迟延。</p><p>总时延 &#x3D; 发送时延 + 传播时延 + 处理时延 + 排队时延</p><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726982421225.png" alt="QQ_1726982421225"></p><p>例题一：</p><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726983030590.png" alt="QQ_1726983030590"></p><h4 id="时延带宽积："><a href="#时延带宽积：" class="headerlink" title="时延带宽积："></a>时延带宽积：</h4><p>时延带宽积(bit) &#x3D; 传播时延(s) * 带宽(bit&#x2F;s)</p><p>时延带宽积的含义：一条链路中：已从发送发出但未到达接收端的最大比特数。</p><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726983380927.png" alt="QQ_1726983380927"></p><p>（底面积 * 高 &#x3D; 体积）</p><p>时延带宽积用于设计最短帧长。</p><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726983714605.png" alt="QQ_1726983714605"></p><h4 id="往返时延："><a href="#往返时延：" class="headerlink" title="往返时延："></a>往返时延：</h4><p>往返时延RTT（Round-Trip Time）：表示从发送方发送完数据，到发送方收到来自接收方的确认总共经历的时间。</p><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726983918186.png" alt="QQ_1726983918186"></p><p>游戏延迟 52ms：反应的就是手机-服务器的往返时延RTT。</p><h4 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h4><p>信道利用率：某个信道有百分之多少的时间是由数据通过的。</p><p>信道利用率 &#x3D; 有数据通过的时间&#x2F;(有数据通过的时间+没数据通过的时间)。</p><p>信道利用率不能太低：浪费资源。</p><p>信道利用率不能太高，容易导致网络拥堵。</p><h4 id="主要考点："><a href="#主要考点：" class="headerlink" title="主要考点："></a>主要考点：</h4><p><img src="/2024/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B02/QQ_1726984465583.png" alt="QQ_1726984465583"></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网Part1-概述3</title>
    <link href="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/"/>
    <url>/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/</url>
    
    <content type="html"><![CDATA[<h1 id="计网Part1-概述3"><a href="#计网Part1-概述3" class="headerlink" title="计网Part1-概述3"></a>计网Part1-概述3</h1><h2 id="计算机网络-分层结构"><a href="#计算机网络-分层结构" class="headerlink" title="计算机网络-分层结构"></a>计算机网络-分层结构</h2><p>分层的设计思想：将庞大而复杂的问题，转化为若干较小的局部问题。</p><p>分层结构的设计并不唯一，可以更具实际需求增加或减少层次<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727256105828.png" alt="QQ_1727256105828"></p><h3 id="三种常见的计算机网络体系结构"><a href="#三种常见的计算机网络体系结构" class="headerlink" title="三种常见的计算机网络体系结构"></a>三种常见的计算机网络体系结构</h3><p><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727256189715.png" alt="QQ_1727256189715"></p><p>TCP&#x2F;IP:简单高效<br>五层模型：教学用，考试用</p><p>1）网络体系机构(Network Architecture)：是计算机网络的各层及其协议的集合，就是这个计算机网络及其构建所应完成的功能的精确定义（不涉及实现）。</p><p>2）实现(implementation)是遵循这种体系结构的前提下，用何种硬件或软件完成这些功能的问题</p><p>体系结构是抽象的，而实现是具体的。</p><h3 id="各层之间的关系"><a href="#各层之间的关系" class="headerlink" title="各层之间的关系"></a>各层之间的关系</h3><p>水平视角：<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727256621292.png" alt="QQ_1727256621292"></p><p>实体：对等层，对等实体<br>协议：控制对等实体之间的通信的规则集合。</p><p>垂直视角：<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727256750545.png" alt="QQ_1727256750545"></p><p>接口：相邻层的实体交换信息的逻辑接口。<br>服务：下层为紧邻的上层提供功能服务</p><h3 id="数据传输过程"><a href="#数据传输过程" class="headerlink" title="数据传输过程"></a>数据传输过程</h3><p>垂直视角：<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727257157359.png" alt="QQ_1727257157359"></p><p>同一层次的对等实体之间，需要遵循某些协议。</p><h3 id="PDU，SDU，PCI的概念"><a href="#PDU，SDU，PCI的概念" class="headerlink" title="PDU，SDU，PCI的概念"></a>PDU，SDU，PCI的概念</h3><p>1）协议数据单元(PDU)<br>对等层之间传输的数据单元，第n层的PDU记为n-PDU<br>2）服务数据单元（SDU）<br>为完成桑一层实体要求的功能而传递的数据，第n层的SDU记作n-SDU<br>3）协议控制信息（PCI）<br>控制协议操作的信息，第n层的PCI记作n-PCI</p><p>n_PDU&#x3D;n_SDU+n_PCI&#x3D;(n-1)_SDU<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727257547631.png" alt="QQ_1727257547631"></p><h3 id="协议的三要素"><a href="#协议的三要素" class="headerlink" title="协议的三要素"></a>协议的三要素</h3><p>协议：即网络协议，是控制对等实体之间通信的规则的集合。是水平的。<br>协议由：语法，语义，同步三部分组成（协议三要素）<br>1）语法：数据与控制信息的格式。<br>2）语义：即需要发出何种控制信息，完成何种动作及做出何种应答。<br>3）同步(时序)：执行各种操作的条件，时序关系等，即时间实现的顺序的详细描述<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727257801733.png" alt="QQ_1727257801733"></p><h3 id="分层结构-总结"><a href="#分层结构-总结" class="headerlink" title="分层结构-总结"></a>分层结构-总结</h3><p><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727257931921.png" alt="QQ_1727257931921"></p><h2 id="参考模型"><a href="#参考模型" class="headerlink" title="参考模型"></a>参考模型</h2><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>记住：各层的名称和顺序<br>了解：常见网络设备的功能和层次<br>了解：各层的功能</p><p>OSI参考模型的七层结构<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727258329001.png" alt="QQ_1727258329001"></p><p>物联网输会示用</p><h4 id="常见的网络设备的功能层次"><a href="#常见的网络设备的功能层次" class="headerlink" title="常见的网络设备的功能层次"></a>常见的网络设备的功能层次</h4><p><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727258459496.png" alt="QQ_1727258459496"></p><p>物理传输媒体（0层）：网线，光纤</p><p>1）物理层的任务：实现相邻借鉴之间的比特（0&#x2F;1）的传输。<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727258584498.png" alt="QQ_1727258584498"><br>物理传输媒体可能会收到差错而影响到传输的数据，所以就要有数据链路层：</p><p>2）数据链路层的任务：<br>1.差错控制（只能控制帧的准确性，一个分组分为很多帧）<br>2.流量控制（防止丢失）</p><p>数据链路层在原本的数据基础上，增加校验信息，接收方接收到数据以后根据校验信息判断是否损坏来修复或者丢弃+重传<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727258821907.png" alt="QQ_1727258821907"></p><p>有这两层已经可以实现无差错传输数据了，但是网络中不可能只有两个节点，如果节点增加呢，怎么记住目的地？增加网络层：</p><p>3）网络层的任务：<br>1.路由选择：规划出最佳路径<br>2.分组转发：将分组从河里的端口转发出去<br>3.拥塞控制：拥堵了，减少流量<br>4.网际互联<br>5.其他功能（差错控制等）<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727259183413.png" alt="QQ_1727259183413"></p><p>好好好，网络层有了就可以在计算机之前传输数据了，但是怎么知道是哪个软件发的数据呢，就需要增加传输层（端口号）实现端到端传输。</p><p>4）传输层任务：实现端到端通信，就是实现进程之间通信（端指的是端口）：<br>1.复用：多个进程可以使用端口号，去请求传输层服务<br>2.分用：将数据分发给对应的端口<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727259466603.png" alt="QQ_1727259466603"><br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727259513162.png" alt="QQ_1727259513162"></p><p>传输层的差错控制是对报文段的</p><p>5）会话层&#x2F;表示层&#x2F;应用层<br>1.会话层：会话管理<br>2.表示层：数据格式转换<br>3.应用层：~~~<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727259657646.png" alt="QQ_1727259657646"></p><h4 id="OSI参考模型总结"><a href="#OSI参考模型总结" class="headerlink" title="OSI参考模型总结"></a>OSI参考模型总结</h4><p><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727259721306.png" alt="QQ_1727259721306"></p><p>4321层都要实现数据的分段和重装。<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727259859916.png" alt="QQ_1727259859916"></p><h3 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP&#x2F;IP参考模型"></a>TCP&#x2F;IP参考模型</h3><p><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727259924596.png" alt="QQ_1727259924596"></p><p>接网输用~~~</p><p>表示层和会话层：不是所有应用都需要的，直接干掉，只要应用层~<br>如果有些应用需要呢？<br>应用层：很简单，我来做不就是了</p><p>tcp&#x2F;ip模型：网络层<br>网络层任务：实现相邻节点间的数据传输（为网络传输“分组”）。但具体怎么实现传输不做太死板的规定。</p><h2 id="参考模型总结"><a href="#参考模型总结" class="headerlink" title="参考模型总结"></a>参考模型总结</h2><p><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727260340043.png" alt="QQ_1727260340043"></p><p>网络层：去除掉了差错控制，流量控制等。中间节点就不做校验，等到了目的节点，合并成报文以后才校验<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727260689333.png" alt="QQ_1727260689333"></p><p>！全局正确就是正确，不管局部正确不正确！<br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727260750766.png" alt="QQ_1727260750766"></p><p><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727260768619.png" alt="QQ_1727260768619"><br><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91Part1-%E6%A6%82%E8%BF%B03/QQ_1727260815524.png" alt="QQ_1727260815524"></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
